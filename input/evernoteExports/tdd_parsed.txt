<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is TDD ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">TDD is a technique for improving the software’s internal quality, whereas acceptance TDD helps us keep our product’s external quality on track by giving it the correct features and functionality.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/01fig01.jpg" width="170"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">TDD is a way of programming that encourages good design and is a disciplined process that helps us avoid programming errors. TDD does so by making us write small, automated tests, which eventually build up a very effective alarm system for protecting our code from regression. You cannot add quality into software after the fact, and the short development cycle that TDD promotes is well geared toward writing high-quality code from the start.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are acceptance TDD ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Acceptance TDD provides the missing ingredient to delivering a good product by bridging the gap between the programmer and the customer. Rather than working off of arbitrary requirements documents, in acceptance TDD we strive for close collaboration and defining explicit, unambiguous tests that tell us exactly what it means when we say a feature is “done.” By defining the desired functionality in very concrete terms—via executable tests—we are effectively ensuring that we’re delivering what the customer needs.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means write code to fix a failing test ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">As we learned in the first paragraph of this chapter, test-driven development, or TDD, is a programming technique based on a very simple rule:&nbsp;</span>  <span style="color: rgb(51, 51, 51); font-style: italic;">Only ever write code to fix a failing test.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In other words, write the test first, and only then write the code that makes it pass. This rule is controversial to many of us who have been schooled to first produce a thorough design, then implement the design, and finally test our software in order to find all those bugs we’ve injected during implementation. TDD turns this cycle around, as illustrated in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_010.html#ch01fig03" style="color: rgb(7, 7, 7);">figure 1.3</a>. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">TDD turns around the traditional design-code-test sequence. Instead, we test first, then write code, and design afterward.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/01fig03.jpg" width="269"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Test first, then code, and design afterward. Does the thought of “designing afterward” feels awkward? That’s only natural. It’s not the same kind of design we’re used to in the traditional design-code-test process. In fact, it’s such a different beast that we’ve given it a different name, too. We call it</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">refactoring</span>   <span style="color: rgb(51, 51, 51);">to better communicate that the last step is about transforming the current design toward a better design. With this little renaming operation, our TDD cycle really looks like that in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_010.html#ch01fig04" style="color: rgb(7, 7, 7);">figure 1.4</a>:   <span style="font-style: italic;">test-code-refactor</span>. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Test-code-refactor is the mantra we test-driven developers like to chant. It describes succinctly what we do, it’s easy to spell, and it sounds cool.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In its deceptive simplicity, this little cycle, test-code-refactor, encompasses a significant power to improve the overall quality of our personal software process and, subsequently, that of the whole team, project, and organization.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto"></div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is the red green refactor mnemonic ?&nbsp; </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-style: italic; color: rgb(51, 51, 51);">Red-green-refactor</span>   <span style="color: rgb(51, 51, 51);">is an alternative mnemonic for the</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">TDD cycle</span>   <span style="color: rgb(51, 51, 51);">of writing a test, making it pass, and making it pretty. What’s with the colors, you ask?</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">When we begin the TDD cycle by writing a test, it fails. It fails because our system is broken right now; it doesn’t have all the functionality we want it to have. In some development environments, it fails by displaying a red bar—thus the</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">red</span>   <span style="color: rgb(51, 51, 51);">in the mnemonic.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In the second step, making it pass, we implement the missing functionality so that all tests pass—both the one we just added and all the ones we had already. At this time, the red bar turns to green, which takes us to</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">green</span>   <span style="color: rgb(51, 51, 51);">in the mnemonic.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The last part of the cycle,</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">refactor</span>  <span style="color: rgb(51, 51, 51);">, is just that—refactoring. As we improve the design of the code without altering its external behavior, all tests should pass and, thus, we should remain green.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  can you explain what incremental design means ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">TDD removes this problem by proceeding in small steps, each of which results in a working product that’s one small step closer to the desired behavior. Because these steps are so small (calculated in minutes rather than hours or days), we don’t end up with a pile of random code we need to quickly stitch together. We keep the software working by never letting it go too far away from that state. Likewise, we keep the software lean and mean by designing for the present moment rather than looking too far ahead.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Building software in increments and, especially, in increments dictated by the perceived cost and benefit of business functionality, is not something you can do with the traditional “design everything up front, considering every possible twist, so that the architecture is rock solid and supports all the features the product will have” approach to design. We can’t build the complete, perfect architecture for the envisioned end product in a single run. Only the simplest or most thoroughly understood project makes it possible to get the architecture right early on. We need to iterate, adding to our design a small step at a time.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_010.html#ch01fig07" style="color: rgb(7, 7, 7);">Figure 1.7</a> shows how this iterative, incremental process moves back and forth between the small step of adding functionality and adjusting our design—and architecture—to properly accommodate that added functionality. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 1.7. Incremental design is about adjusting the code’s structure in small increments as more behavior is added. At any stage during the lifetime of the code base, the code exhibits the best design the developers could conceive for supporting the present functionality. This way, we evolve an empirically proven architecture.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/01fig07.jpg" width="188"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">This is incremental and evolutionary design. Instead of designing as much as we possibly can up front, we design as much as we deem necessary in order to make progress. Instead of thoroughly analyzing all the possible scenarios imaginable before finalizing the design, we opt for making our design decisions based on knowledge—not assumptions—acquired during implementation.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are good tests made of ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">So tests are generally better than tasks for guiding our work, but does it matter what kind of tests we write? Sure it does. Although there’s no universal definition for what constitutes a good test, there are some guidelines and heuristics we can use to assess whether we’re writing good tests. There are plenty of rules for the technical implementation of a (unit) test</span>&nbsp;but from the perspective of decomposing requirements into tests, two properties of a good test can be identified as especially important: </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Such as “tests should be isolated and order independent,” “tests should run fast,” “tests shouldn’t require manual setup,” and so on. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  A good test is atomic. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  A good test is isolated. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">What these properties are saying is that a good test tests a small, focused, atomic slice of the desired behavior and that the test should be isolated from other tests so that, for example, the test assumes nothing about any previously executed tests. The atomicity of a test also helps us keep our eye on the ball—a small but steady step toward the goal of a fully functional, working system.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  can you explain what means prototyping with spikes ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Sometimes when facing a stop, breathe, design moment, we decide to dig deeper into a potential solution—be it some fancy new technology, that ancient API nobody has used since the company’s infamous Y2K project, or an algorithm that seems to fit the bill better than what we currently have. A spike is a short</span>  <span style="vertical-align: super; color: rgb(102, 102, 102);">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_012.html#ch03fn01" style="vertical-align: super; color: rgb(7, 7, 7);">1</a>  <span style="vertical-align: super;">]</span> experiment with the purpose of familiarizing ourselves with the technology, tools, algorithms, and so forth, that we need for solving the problem at hand. A spike is a way to make an unknown known—at least to a point where we know whether it’s worth continuing to dig that way or whether we should start looking for another way. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">We typically don’t do our spikes quite as strictly as regular development with regard to programming test-first. Some do, however, stick to TDD also for spikes—and, since we’re getting so many nice benefits out of it for the rest of our work, why not! The important thing is, though, that we don’t just take what we hacked together in a spike and glue it on top of our production code. We want to keep our software healthy, so we’ll write the test first and only then write the code—not by copying and pasting the whole spike product piece by piece, but rather using our newly acquired knowledge from the spike and keeping the design lean and clean.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  how do you select how to test a feature ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">To start with, we might want to consider the following four strategies to aid our decision of which test to write nex</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Diving first into details versus starting with the big picture </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Exploring uncertain territory versus sticking with the familiar and comfortable </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Going for the highest value versus picking the low-hanging fruit first </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Treading the happy path first versus starting with handling error situation </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what does mean diving first into details versus starting with the big picture ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Both approaches have their unique advantages and disadvantages, of course. Details first is a good way of tackling risks such as, “Are we able to recognize a pattern from a user-submitted image?” but solving the pattern recognition problem delays progress (certainty) regarding the big picture. Big-picture first, on the other hand, is a good way of testing out the envisioned design quickly without needing to worry about the details. The downside of big-picture first is that we’re delaying progress on the details.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In practice, we identify the risks and uncertainties associated with these alternative foci and usually (but not necessarily—which we’ll discuss in the next section) tackle the aspect we’re more concerned about. Which leads us directly to our second test-selection strategy—choosing between exploring the uncertain versus sticking with the familiar.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means exploring uncertain territory versus sticking with the familiar and comfortable ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Reducing uncertainty is one factor we might consider when selecting the next test. The alternative for reducing uncertainty would be to stick with the familiar and proceed on a safe, known path for the moment, dealing with the uncertain later. The advantage of exploring the uncertain is simple and straightforward—we’re effectively reducing risks by turning the unknown into the known.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">So what’s the advantage of sticking with the cozy old couch, the familiar area of our design that isn’t likely to reveal that much new information? Well, it turns out that not all paths embed an equal amount of value in return for the effort spent. Although there is value in reducing risk, sometimes there’s even more value in quickly beating down a known path and picking the low-hanging fruit first, instead of climbing the tree right away to figure out whether we can do it.</span>  <span style="vertical-align: super; color: rgb(102, 102, 102);">[</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means going for the highest value versus picking the low-hanging fruit first ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Looking at a list of tests we have yet to write, we can usually identify a couple of tests that are clearly more work than others. Similarly, we can usually identify differences in how valuable the behavior represented by the test in question is for the larger whole. Ideally, we should try to identify and select tests that let us make the most progress (yield the most value) with the smallest effort. Most of the time, however, there’s no such clear candidate, and we need to decide among multiple tests with more or less equal benefit-to-effort price tags.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">A typical (if somewhat exaggerated) example of a high-value test versus a low-hanging fruit might be testing an object for positive functionality versus testing the same object for handling null input. The positive functionality is likely more laborious to implement but almost by definition yields more value. The defensive functionality, handling null input, is likely far easier to implement but also yields much, much less value in terms of functionality.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means treading the happy path first versus starting with handling error situation ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">As a rule of thumb, I drive for the happy path first before proceeding to handle exceptional scenarios, such as exceptions thrown by third-party APIs, malformed input, and so forth. The reason for doing so is mostly about value. Even the most robust system capable of handling any conceivable error situation is practically useless when it isn’t able to perform its basic function. On the other hand, even a system that, for example, is prone to crash if the network is temporarily down still provides value as long as the network isn’t down.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is triangulation in testing ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">We already saw triangulation in effect in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_012.html#ch03" style="color: rgb(7, 7, 7);">chapter 3</a> when we wanted to squeeze out a hard-coded string from our production code. Triangulation is a useful technique for evolving toward a correct implementation when we don’t yet have a clear concept of how to generalize a given piece of hard-coded logic. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">We call the technique triangulation because it’s a lot like how the cops on TV track down bad guys based on their cell-phone signals. The cops’ triangulation involves observing the direction of the subject’s signal from multiple locations. Knowing the locations of the observation stations, the cops can draw two lines on a map and see where the lines intercept.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In the triangulation technique we TDD folks use, we don’t observe signals and we don’t draw lines on maps. Instead, each of the tests we write constrains the available solution space to one dimension. When we have enough tests, as illustrated in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig01" style="color: rgb(7, 7, 7);">figure 4.1</a>, the tests effectively narrow down—triangulate—the exact solution we were looking for. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 4.1. Triangulation is about narrowing down the solution space until it matches our exact needs.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/04fig01.jpg" width="218"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">For example, in developing a credit-card validation component, we might not know how to structure our class hierarchy for supporting multiple credit cards with their slightly differing number lengths and validation rules.</span>  <span style="vertical-align: super; color: rgb(102, 102, 102);">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn03" style="vertical-align: super; color: rgb(7, 7, 7);">3</a>  <span style="vertical-align: super;">]</span> Using triangulation, we might first write tests and implement the code for validating just one brand of cards, say, MasterCard. These tests would be easy to write, and the code to satisfy those tests would be just as straightforward. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="vertical-align: super; color: rgb(102, 102, 102);">3</span> Major credit-card vendors currently use the Luhn formula for calculating a checksum and a set of assigned prefixes to distinguish the various brands from each other. Google “credit card validation” and “luhn formula” for more details. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Next, we’d pick another card vendor, say, Visa, and we’d write tests to verify that our component handles Visa as well as MasterCard, distinguishing between them where necessary. These new tests would slowly start pushing our code toward a state where the suitable places for generalization become obvious. By the time we’re adding a test for Diners Club, it’s likely that we’ll see where the code wants us to generalize.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are the guidelines for writing tdd safely ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">We ended up with the following list of guidelines:</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Do. Not. Skip. Refactoring. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Get to green fast. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Slow down after a mistake. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Let’s go through these guidelines one by one, examining what makes them so important that they made it to our short list.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means do. not. skip. refactoring ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">If you haven’t yet considered tattooing the word</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">refactor</span>   <span style="color: rgb(51, 51, 51);">on the back of both your hands, now would be a good time to do that. And I’m only half joking. The single biggest problem I’ve witnessed after watching dozens of teams take their first steps in test-driven development is insufficient refactoring.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Not refactoring mercilessly and leaving duplication in the code base is about the closest thing to attaching a time bomb to your chair. Unfortunately, we are good at remembering the “test” and “code” steps of the TDD cycle and extremely proficient at neglecting a code smell that screams for the missing step.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Thus, I urge you to pay attention to not skipping refactoring. If you have someone to pair with, do so. Crosscheck with your programming buddy to spot any duplication you may have missed. Bring Fowler’s</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">Refactoring</span>   <span style="color: rgb(51, 51, 51);">book with you to the toilet.</span>  <span style="vertical-align: super; color: rgb(102, 102, 102);">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn04" style="vertical-align: super; color: rgb(7, 7, 7);">4</a>  <span style="vertical-align: super;">]</span> Learn to use your IDE’s automated refactorings. It’s good for you—the doctor said so! </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means get to green fast ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">As we test-drive, we’re basically aiming for the simplest design we can think of for the problem at hand. We don’t, however, go for the simplest design right off the bat in the code step. Instead, we should strive to get back to green fast. The code step is where we get to that green bar with as few edits as possible. The refactoring step is where we perfect our design.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">You might want to read the previous paragraph out loud. Don’t worry about others looking at you like you’re a freak. You’re just pointing out facts.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Speaking of facts, it’s more than likely that you will make one or two mistakes in your career even after adopting TDD. Our third guideline tells us to slow down once the proverbial smelly substance hits the fan.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means slow down after a mistake during tdd ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">It is common for developers practicing TDD to start taking slightly bigger and bigger steps as time goes by. At some point, however, we’ll take too big a bite off our test list and end up reverting our changes. At these points, we should realize that the steps we’re taking are too big compared to our ability to understand the needed changes to our implementation. We need to realize that we must tighten our play. Small steps. Merciless refactoring. It’s that simple. Walking to the water cooler might not be a bad idea either.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are stubs ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Stubs are essentially the simplest possible implementation of a given interface you can think of. For example, stubs’ methods typically return hardcoded, meaningless values.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are fakes ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Fakes are a degree more sophisticated than stubs in that they can be considered an alternative implementation of the interface. In other words, a fake looks like a duck and walks like a duck even though it isn’t a real duck. In contrast, a stub only looks like a duck.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are mocks ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Mocks can be considered even more sophisticated in terms of their implementation, because they incorporate assertions for verifying expected collaboration with other objects during a test. Depending on the implementation of a mock, it can be set up either to return hardcoded values or to provide a fake implementation of the logic. Mocks are typically generated dynamically with frameworks and libraries, such as EasyMock, but they can also be implemented by hand.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  why do we should prefer composition over inheritance ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">build complex objects out of smaller islands of functionality. In object-oriented programming languages, the main candidates for doing that are</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">inheritance</span>   <span style="color: rgb(51, 51, 51);">and</span>   <span style="font-style: italic; color: rgb(51, 51, 51);">composition</span>  <span style="color: rgb(51, 51, 51);">.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Inheritance, having a class inherit functionality from a superclass as shown in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig02" style="color: rgb(7, 7, 7);">figure 4.2</a>, has traditionally been used to enable reuse of functionality within a class hierarchy. Although it’s a nice feature for a programming language, inheritance does have its downside when it comes to testability, maintainability, and overall flexibility of design. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 4.2. Inheriting from a superclass lets the subclass inherit all the functionality of the superclass. It does, however, also introduce inconvenient constraints related to instantiating the subclass in a test harness.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage.jpg" type="image/jpeg" data-filename="Image.jpg" width="81"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Specifically, having to deal with an inheritance hierarchy can sometimes make it unnecessarily difficult to instantiate our objects in a test harness. In Java, for example, we might have to provide valid input only needed by the superclass constructor even though we’re just interested in an aspect of the child class. This can be a real pain if the input itself is a complex object graph and, thus, difficult or laborious to instantiate.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Furthermore, even the smallest of changes could potentially cause a ripple effect throughout the class hierarchy, which is obviously not an ideal situation. Inheritance is often too restrictive to be an easily testable construct. This leads us to the alternative—composition—shown in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig03" style="color: rgb(7, 7, 7);">figure 4.3</a>. </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 4.3. Composition allows for a more flexible design solution for reusing functionality from another class. For example, we can instantiate the composite object with alternative implementations of its components if they are difficult to obtain in a test harness.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage1.jpg" type="image/jpeg" data-filename="Image.jpg" width="193"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Composition is a way to build objects that provide complex functionality by combining a set of less complex component objects. The top-level composite object delegates work to its components instead of invoking methods from its superclass.</span>  <span style="vertical-align: super; color: rgb(102, 102, 102);">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn14" style="vertical-align: super; color: rgb(7, 7, 7);">14</a>  <span style="vertical-align: super;">]</span> In essence, composition is based on object-level division of responsibility instead of static, class-level division. Composition tends to be slightly more verbose than inheritance, measured in lines of code, but its improved characteristics in terms of testability, flexibility, and maintainability often more than outweigh the cost of those extra lines of code. </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  why we should avoid static methods and singletons ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Another potential obstacle in terms of testability of your code is the use of static method calls and the Singleton pattern. Depending on how intertwined your particular static/Singleton is in the code base you’re testing, it might be surprisingly difficult or awkward to replace the implementation behind the static method with a test double for your test. Perhaps most of the time we don’t need to fake the Singleton or a static method, but when we do (for example, if the static method or Singleton instance would try to connect to a remote server during a test run), it sure isn’t as easy as it could be.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig04" style="color: rgb(7, 7, 7);">Figure 4.4</a>   <span style="color: rgb(51, 51, 51);">depicts a situation of the class under test (</span>  <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">ClassUnderTest</span>  <span style="color: rgb(51, 51, 51);">) calling a static method or using a Singleton.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 4.4. Static method calls are difficult to fake because the target class for the call is hardcoded. Similarly, it is difficult to substitute a fake implementation for a Singleton class obtained through the usual (static...)</span>   <kbd style="box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;"><span style="font-family: &quot;Liberation Mono&quot;, monospace; font-weight: bold; color: rgb(64, 64, 64);">getInstance()</span></kbd>   <span style="font-weight: bold; color: rgb(64, 64, 64);">method call.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage2.jpg" type="image/jpeg" data-filename="Image.jpg" width="404"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In fact, it’s not the Singleton pattern itself that causes trouble—it’s the default implementation of the Singleton. In any case, we need a way for test code to configure a fake implementation for the static method or Singleton for the duration of the test. In practice, that means providing a static method somewhere for replacing the default implementation with a fake implementation and one for reverting back to the default implementation when the test has executed.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In most cases, however, I’d recommend first looking at ways to get rid of the static methods by converting them into instance methods. In many cases, and with object instantiation being dirt cheap with modern virtual machines, that’s a question of simply removing the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">static</span>   <span style="color: rgb(51, 51, 51);">keyword and replacing static references with instance method calls.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">To showcase the problem static variables and methods present for testability, refer to</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex03" style="color: rgb(7, 7, 7);">listing 4.3</a>  <span style="color: rgb(51, 51, 51);">, which illustrates a situation where it’s technically not possible to fake a method by simply subclassing and overriding it.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.3. The problem with static methods and testability</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">public class Database {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; public static Object findById(String id) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // fetch an object from the database,</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // returning a null if the id is not found</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro"><br></font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; public static boolean objectExists(String id) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; return (findById(id) != null);</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">}</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro"><br></font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">public class TestDatabase {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; @Test</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; public void testObjectExists() throws Exception {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // How can I fake findById() to return</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // "true" or "false" as I wish?</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; assertTrue(Database.objectExists("123"));</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">}</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In the code shown in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex03" style="color: rgb(7, 7, 7);">listing 4.3</a>  <span style="color: rgb(51, 51, 51);">, there’s just no way to fake</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">findById</span>   <span style="color: rgb(51, 51, 51);">without altering the compiled byte code because the code under tests references the specific implementation class explicitly. We can’t subclass and override it because it’s all static.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">We could alter byte code, but that’s quite an investment that we’re not ready to make right now.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">A common trend in how people use Singleton classes revolves around the pattern’s characteristic of providing a single point of access. Although it’s good to have that single point of access, it can become problematic if the access to that single point of access is sprinkled throughout the rest of your code base. For example, consider the example in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex04" style="color: rgb(7, 7, 7);">listing 4.4</a>   <span style="color: rgb(51, 51, 51);">of a method making use of a static method to obtain a dependency.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.4. Code smell: methods obtaining dependencies through static method calls</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">public class OrderProcessor {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; public void process(Order order) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; PricingService service = PricingService.getInstance();</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // use the PricingService object for processing the order</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">}</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">This is bad form. We’re mixing the acquisition of the dependencies with the logic that makes use of those dependencies</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  why and how we can isolate dependencies ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In order to facilitate replacement of dependencies with test doubles, it is essential to first isolate the dependencies in a way that lets us perform the replacement as easily as possible. One delightfully trivial way to do that is to wrap access to static methods like the one in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex04" style="color: rgb(7, 7, 7);">listing 4.4</a>   <span style="color: rgb(51, 51, 51);">into instance methods. This makes for more code, yes, but it also lets us override the method in question, thereby eliminating the tightly coupled dependency caused by a static method call.</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex05" style="color: rgb(7, 7, 7);">Listing 4.5</a>   <span style="color: rgb(51, 51, 51);">presents the same example with this isolation.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.5. Code smell relieved: static method call wrapped into an instance method</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage3.jpg" type="image/jpeg" data-filename="Image.jpg" width="590"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">Working Effectively with Legacy Code</span>  <span style="color: rgb(51, 51, 51);">,</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn16" style="vertical-align: super; color: rgb(7, 7, 7);">16</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">Michael Feathers defines the concept of</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">seams</span>  <span style="color: rgb(51, 51, 51);">: “a place where you can alter behavior in your program without editing in that place.” In other words, seams are places where we can replace a piece of code with other code for the duration of a test run, for example, without touching the code under test. In</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex05" style="color: rgb(7, 7, 7);">listing 4.5</a>  <span style="color: rgb(51, 51, 51);">, the call to the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">getPricingService</span>   <span style="color: rgb(51, 51, 51);">method is a seam from the point of view of a test case exercising the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">process</span>   <span style="color: rgb(51, 51, 51);">method. A seam is by definition accompanied by one or more</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">enabling points</span>  <span style="color: rgb(51, 51, 51);">, that is, ways to exploit the seam. In</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex05" style="color: rgb(7, 7, 7);">listing 4.5</a>  <span style="color: rgb(51, 51, 51);">, the enabling point is the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">getPricingService</span>   <span style="color: rgb(51, 51, 51);">method itself, which we can exploit by overriding it as illustrated by</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex06" style="color: rgb(7, 7, 7);">listing 4.6</a>  <span style="color: rgb(51, 51, 51);">.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(102, 102, 102); vertical-align: super;">16</span>   <span style="color: rgb(51, 51, 51);">Michael Feathers,</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">Working Effectively with Legacy Code</span>   <span style="color: rgb(51, 51, 51);">(</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_028.html#biblio0_010" style="color: rgb(7, 7, 7);">Addison-Wesley, 2004</a>  <span style="color: rgb(51, 51, 51);">). I can’t possibly recommend it enough. If you’re working with software that needs to survive the test of time, you practically owe yourself reading that book.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.6. Exploiting a seam</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage4.jpg" type="image/jpeg" data-filename="Image.jpg" width="581"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The seam we just saw is an example of what Feathers calls an</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">object seam</span>  <span style="color: rgb(51, 51, 51);">, referring to the use of the object-oriented feature of being able to override the method transparently to the code that calls it. There are other kinds of seams as well (and differences between programming languages), namely</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">preprocessing seams</span>   <span style="color: rgb(51, 51, 51);">and</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">link seams</span>  <span style="color: rgb(51, 51, 51);">. For example, C/C++ developers can take advantage of preprocessing seams represented by</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">ifdef</span>  <span style="color: rgb(51, 51, 51);">s and macros. Similarly, a Java developer might decide to treat configuration items such as property files, XDoclet tags, and so on. as seams to be exploited with a smart Ant script or two. Examples of link seams could be replacing a dynamic library with a fake version or swapping a JAR file with a fake one using an environment variable such as</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">LD_LIBRARY_PATH</span>   <span style="color: rgb(51, 51, 51);">or</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">CLASSPATH</span>  <span style="color: rgb(51, 51, 51);">.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Isolating dependencies is critical for testability and maintainability. We’ll encounter plenty more examples of isolating dependencies in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_014.html#part02" style="color: rgb(7, 7, 7);">part 2</a>   <span style="color: rgb(51, 51, 51);">of this book. Also, Michael Feathers’</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">Working Effectively with Legacy Code</span>   <span style="color: rgb(51, 51, 51);">offers a thorough coverage of the topic, but I cannot proceed without highlighting one especially helpful pattern. An especially helpful way this isolation improves testability is by letting us turn around the dependencies and, instead of having the production code obtain its dependencies, having someone external</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">inject</span>   <span style="color: rgb(51, 51, 51);">those dependencies in our production code.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are parametrized tests ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Every now and then, we find ourselves writing almost identical tests—tests where only a few input values are different but the logic is essentially the same. In those situations, we might want to consider turning our test class into a Parameterized Test.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The fundamental idea is that there’s one and only one test method, which encapsulates the test logic to be applied to the parameterized data. There obviously also needs to be a method that provides the parameterized data, and there needs to be some code to bind the provided data to invocations to the test method.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Fortunately, the necessary plumbing is already built into JUnit 4, so adopting the Parameterized Test pattern is simply a matter of annotating our test class properly.</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex14" style="color: rgb(7, 7, 7);">Listing 4.14</a>   <span style="color: rgb(51, 51, 51);">presents an example test class that realizes the Parameterized Test pattern with JUnit 4.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.14. Example of the Parameterized Test pattern using JUnit 4</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage5.jpg" type="image/jpeg" data-filename="Image.jpg" width="590"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage6.jpg" type="image/jpeg" data-filename="Image.jpg" width="590"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The Parameterized Test in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex14" style="color: rgb(7, 7, 7);">listing 4.14</a> builds up from three parts. First of all, </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  we provide JUnit with the parameterized data through a static method annotated with   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">@Parameters</span>. The method returns a   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Collection</span> of object arrays where each array represents a single data set or a test instance. In other words, JUnit instantiates our test class once for each object array. The instantiation happens by JUnit  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  passing the object array’s contents to the constructor, which typically stores the values to fields for later access. Finally, JUnit invokes the&nbsp; </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  test method, identified by the usual   <span style="font-family: &quot;Liberation Mono&quot;, monospace; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">@Test</span> annotation. And that’s it.  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The Parameterized Test pattern is a good way of supporting some degree of data-driven testing. Once we’ve written a skeleton like that in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex14" style="color: rgb(7, 7, 7);">listing 4.14</a>  <span style="color: rgb(51, 51, 51);">, it’s extremely fast to start adding new test cases by adding a new object array into the data.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Adding stuff to an object array in Java code isn’t exactly the user-friendliest way to create new test cases, however. The example in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex14" style="color: rgb(7, 7, 7);">listing 4.14</a>   <span style="color: rgb(51, 51, 51);">would also be much more readable with each of its test cases implemented as separate one-line assertions. Indeed, perhaps the most compelling use case for the Parameterized Test pattern is where the amount of test data is huge and comes from an external data source such as an XML document or an ASCII text file, parsed by the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">@Parameters</span>   <span style="color: rgb(51, 51, 51);">annotated method. This way, the test class becomes again slightly more complex, but it has the benefit of being able to describe the test data in a more suitable syntax and file format.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Tests that deal with a lot of data are the minority, however, so let’s move on to discuss something that’s closer to everyday business. Because many objects need to collaborate with dependencies, I’m thinking the Self-Shunt might be an excellent test pattern to cover next.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what are test shunts ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Earlier in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04lev1sec3" style="color: rgb(7, 7, 7);">section 4.3</a>  <span style="color: rgb(51, 51, 51);">, we talked about different kinds of test doubles. What we didn’t talk about there was the Self-Shunt, which is kind of a test double-except that it’s our test class. Yes, you got that right. The Self-Shunt pattern, first documented by Michael Feathers,</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn25" style="vertical-align: super; color: rgb(7, 7, 7);">25</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">is one where the test class instance acts as a test double in its own tests.</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex15" style="color: rgb(7, 7, 7);">Listing 4.15</a>   <span style="color: rgb(51, 51, 51);">illustrates this concept with a concrete example.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.15. Example of the Self-Shunt pattern in action</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage7.jpg" type="image/jpeg" data-filename="Image.jpg" width="590"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);"><br></span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex15" style="color: rgb(7, 7, 7);">listing 4.15</a>, we can see how the test class </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  implements the   <span style="font-family: &quot;Liberation Mono&quot;, monospace; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">PricingService</span> interface, which means we can then  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  pass   <span style="font-family: &quot;Liberation Mono&quot;, monospace; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">this</span> to the object under test as its collaborator instead of having to create a separate test double class or clutter our test code with an anonymous implementation. An anonymous class isn’t a bad idea for this kind of simple alternative implementation; but as the fake grows in size, so does the degree of cluttering, driving us toward having a Self-Shunt or an actual, named test-double class.  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In other words, the Self-Shunt pattern is an excellent tool for implementing simple test-double logic near the tests that use it. As the logic grows more complex, however, it is often a good idea to move toward a full-blown test double. Having said that, we do have to remember that full-blown test doubles have their own disadvantages, too. If we’d like to share objects and states between our test methods and the test double, an Intimate Inner Class might be a better option.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is an intimate inner class ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">There are occasions when we’d like to share some objects between the test class and a test double. This kind of a need can be fulfilled in a number of ways (adding a get method being one of them), but the Intimate Inner Class pattern is perhaps one of the less obvious solutions. That does not mean that it wouldn’t be an elegant solution, however. In fact, the ability of a non-static inner class to access and assign to the test class’s fields can yield nice, compact test code compared to, for example, exposing the internals of a test double through getter methods.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Let’s clarify the role of the Intimate Inner Class through a code example.</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex16" style="color: rgb(7, 7, 7);">Listing 4.16</a>   <span style="color: rgb(51, 51, 51);">presents an example scenario where we’d like to test that a</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Server</span>   <span style="color: rgb(51, 51, 51);">object obtains a</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Thread</span>   <span style="color: rgb(51, 51, 51);">from its configured</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">ThreadFactory</span>   <span style="color: rgb(51, 51, 51);">upon startup and suspends it when stopped. The solution is to use an Intimate Inner Class, which assigns the newly created</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Thread</span>   <span style="color: rgb(51, 51, 51);">instance to the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">thread</span>   <span style="color: rgb(51, 51, 51);">field on the surrounding test class.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.16. Example of an Intimate Inner Class</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage8.jpg" type="image/jpeg" data-filename="Image.jpg" width="590"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Notice how</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  the Intimate Inner Class is  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  sharing the   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">thread</span> field with the test class, allowing the test to  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  access the underlying   <span style="font-family: &quot;Liberation Mono&quot;, monospace; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Thread</span> instance for its assertions.  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Technically, the Intimate Inner Class can be implemented as an anonymous or nested inner class. An anonymous inner class, like the one in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex16" style="color: rgb(7, 7, 7);">listing 4.16</a>  <span style="color: rgb(51, 51, 51);">, can become unwieldy but can access</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">final</span>   <span style="color: rgb(51, 51, 51);">variables from the method it’s created from. A nested inner class, on the other hand, is somewhat cleaner but also more restricted in its access. Both alternatives have the benefit of being able to access the test class’s fields.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is privileged access ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">You may have been in a situation where you needed to change that one bit of legacy code in order to test your stuff—but there was some reason you couldn’t touch the legacy code. In such situations, it may be a reasonable workaround to invade the legacy code’s privacy and directly tweak its internals through the Reflection API in order to make it possible for us to write tests—Privileged Access, if you will.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In doing so, the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">PrivilegedAccessor</span>   <span style="color: rgb(51, 51, 51);">class available from the files section of the JUnit mailing list</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn26" style="vertical-align: super; color: rgb(7, 7, 7);">26</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">is a useful aid. A similar utility called</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">PrivateAccessor</span>   <span style="color: rgb(51, 51, 51);">is available as part of the JUnit-Addons open source library;</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn27" style="vertical-align: super; color: rgb(7, 7, 7);">27</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">and the Laughing Panda community has developed BeanInject,</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn28" style="vertical-align: super; color: rgb(7, 7, 7);">28</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">which knows the same tricks. For example, with the BeanInject project’s</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">Inject</span>   <span style="color: rgb(51, 51, 51);">class, we can forcibly substitute a test double into a private field of a legacy class with one line of code:</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font style="font-family: &quot;Source Code Pro&quot;;">Inject.staticField("foo").of(LegacyCode.class).with(ourTestDouble);</font>  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The ability to inject or read private fields of classes or objects isn’t too useful for projects that have been using TDD from the get-go, but for those working with mounds of legacy code not designed with testability in mind, these kinds of tricks and utilities can save the day. However, if we</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">can</span>   <span style="color: rgb(51, 51, 51);">change the legacy code we should prefer doing that instead of falling back to some Reflection trickery. In fact, our next test pattern is just such a change—one that makes code testable.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what is extra constructor ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The world of computing is full of monolithic code bases that look like a spaghetti monster. When working in these code bases, it’s not uncommon to have a headache because we can’t seem to instantiate some class without pulling in a dozen other classes along the way. The problem, of course, is that the dependencies of the class we’d like to use haven’t been properly isolated. The proper solution would be to isolate the dependencies, perhaps by driving the architecture toward dependency injection, but that might take time. The Extra Constructor pattern, however, provides us with a nice temporary solution.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The basic idea is that because we cannot substitute the dependencies from the outside, we need to do it from the inside. Thus, we add a new constructor to the class we want to test—one that takes as arguments the dependencies we’d like to substitute. This new constructor can then first delegate to the real constructor and subsequently store the passed-in test-double implementations in place of the real dependencies.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">If the original constructor is the place where the real dependencies are instantiated (or if we move them there), we can turn the situation around and make the original constructor delegate to the new constructor, as shown in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex17" style="color: rgb(7, 7, 7);">listing 4.17</a>  <span style="color: rgb(51, 51, 51);">.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Listing 4.17. Example of Extra Constructor exposing dependencies</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage9.jpg" type="image/jpeg" data-filename="Image.jpg" width="579"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04ex17" style="color: rgb(7, 7, 7);">Listing 4.17</a> is a trivial example but serves well in highlighting the Extra Constructor pattern. In the class under test,   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">LogFileMerge</span>, the </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  original constructor creates two   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">URL</span> objects with hard-coded network addresses to   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">server1</span> and   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">server2</span>. First, we don’t want our unit tests to access the network. Second, making sure that the log files on those two servers contain what we expect them to contain is hardly an easy thing to do.&nbsp;  <span style="color: rgb(51, 51, 51);">Thus, instead of assigning the</span>   <kbd style="-webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;"><span style="font-family: &quot;Liberation Mono&quot;, monospace; color: rgb(51, 51, 51);">URL</span></kbd>   <span style="color: rgb(51, 51, 51);">objects to the</span>   <kbd style="-webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;"><span style="font-family: &quot;Liberation Mono&quot;, monospace; color: rgb(51, 51, 51);">private</span></kbd>   <span style="color: rgb(51, 51, 51);">fields directly in the original constructor, we</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  introduce an Extra Constructor and make the original delegate to the new constructor. This way, leaving the Extra Constructor’s visibility to package   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">private</span>,   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">protected</span>, or   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">public</span>, our tests can instantiate the   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">LogFileMerge</span> class using the Extra Constructor, passing in   <span style="font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">URL</span> objects that point to, for example, local files instead of network addresses.  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Again, this pattern is mostly used for working around the bad design of code that hasn’t been test-driven. Our next and last pattern is also an instrument for facilitating test-driven development in the midst of such legacy code.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  what means test-specific subclass ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Another common anti-pattern I’ve seen a lot during my programming career is the violation of the Single Responsibility Principle.</span>  <span style="color: rgb(102, 102, 102); vertical-align: super;">[</span>  <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fn29" style="vertical-align: super; color: rgb(7, 7, 7);">29</a>  <span style="color: rgb(51, 51, 51); vertical-align: super;">]</span>   <span style="color: rgb(51, 51, 51);">Imagine we’re test-driving some billing functionality that needs to use a complex credit-card processing facility. That facility combines in one class everything related to credit-card transactions and is developed by another team within our company.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Now, let’s say the class is built such that there’s no way to validate a credit-card number without contacting a merchant service provider, because the number validation logic is hidden behind a</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">protected</span>   <span style="color: rgb(51, 51, 51);">method, as shown in the following snippet:</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">public class CreditCardProcessing {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro"><br></font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; public boolean isValid(String cardnumber) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; return validationCodeMatches(cardnumber)</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; cardIsActive(cardnumber);</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro"><br></font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; protected boolean validationCodeMatches(String cardnumber) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // validation logic omitted for brevity...</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro"><br></font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; protected boolean cardIsActive(String cardnumber) {</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // access to merchant system's web service</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; &nbsp; &nbsp; // omitted for brevity...</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">&nbsp; &nbsp; }</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <font face="Source Code Pro">}</font> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Also, for the sake of the example, let’s assume that modifying the class is out of the question due to corporate politics and code ownership. What can we do? Is there a way to handle this situation other than to copy-paste the validation code somewhere else, creating loads and loads of duplication?</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The Test-Specific Subclass pattern lets us expose or modify internal state or behavior in scenarios like the one we just described. In our credit-card processing example, we might create a behavior-modifying subclass of the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">CreditCardProcessing</span>   <span style="color: rgb(51, 51, 51);">class and override the</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">cardIsActive</span>   <span style="color: rgb(51, 51, 51);">method to always return</span>   <span style="color: rgb(51, 51, 51); font-family: &quot;Liberation Mono&quot;, monospace; box-sizing: border-box; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;">true</span>  <span style="color: rgb(51, 51, 51);">. We’d effectively be testing our code with a partially stubbed version of the credit-card processing facility—which is OK as long as our functionality does not need to make a difference between</span>   <span style="color: rgb(51, 51, 51); font-style: italic;">why</span>   <span style="color: rgb(51, 51, 51);">a given card is considered invalid.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Other common variations of the Test-Specific Subclass pattern include behavior and/or state-exposing subclasses where we don’t need to change the way a class works, but rather need information about its internal state or information about what the class is doing internally when its public API is invoked. Once again, the pattern is mostly useful where not all code we write is TDD’d and beautiful but rather ugly legacy code.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">Speaking of ugly legacy code, we are going to finish off this chapter in the next section with a foray into the grim world of legacy code—and how to be test-driven when you’re surrounded by code without tests and code that exhibits bad design.</span> </div></div>

<div class="front"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  how can we work with legacy code in a tdd manner ? </div></div>	<div class="back"> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The way to develop test-first in the context of legacy code is similar to what we need to do when others on our team or project don’t write tests first or at all. We begin by writing tests around the code we want to change. That might require first breaking some dependencies without having tests to watch our back, which means proceeding more slowly than usual. That shouldn’t discourage you, however, because breaking those dependencies and getting in those tests will pay back the investment sooner than you think.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">In his book, Michael also describes a process for working with legacy code, illustrated in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig07" style="color: rgb(7, 7, 7);">figure 4.7</a>  <span style="color: rgb(51, 51, 51);">, which aims to make changing legacy code a disciplined act of software development rather than a cross-fingers-and-press-Enter type of marathon of trial, error, and debugging.</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="font-weight: bold; color: rgb(64, 64, 64);">Figure 4.7. The process of working with legacy code</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <img src="tddImage10.jpg" type="image/jpeg" data-filename="Image.jpg" width="316"> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The process described in</span>   <a href="https://learning.oreilly.com/library/view/test-driven-practical/9781932394856/kindle_split_013.html#ch04fig07" style="color: rgb(7, 7, 7);">figure 4.7</a>   <span style="color: rgb(51, 51, 51);">could be split into three main phases:</span> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Analyzing the change </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Preparing for the change </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  Test-driving the change </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <br> </div> <div align="left" text-align="left" font style="font-size: 10pt" margin="auto">  <span style="color: rgb(51, 51, 51);">The process begins from a (we hope) stable code base and a need to change the system in some way. For example, we might need to add a new configuration parameter that switches between two alternative behaviors. From this state, we go through the three phases of first analyzing the change, then preparing for making the change in a safe and controlled manner, and finally test-driving the change. Eventually, we have created a new stable code base, including our change.</span> </div></div>

