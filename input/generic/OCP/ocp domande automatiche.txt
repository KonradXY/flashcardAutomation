1. Which answer choice can replace line 6 so the code continues to produce the same output?
3: List<String> rug = new ArrayList<>();
4: rug.add("circle");
5: rug.add("square");
6: System.out.println(rug);
A. System.out.println(rug.asString);
B. System.out.println(rug.asString());
C. System.out.println(rug.toString);
D. System.out.println(rug.toString());
|
2. Which best describes this code?
class Stats {
private int data;
public int getData() {
return data;
}
public void setData(int data) {
this.data = data;
}
}
A. It is a singleton.
B. It is well encapsulated.
C. It is immutable.
D. It is both well encapsulated and immutable.
|
3. What design pattern or principle ensures that there will be no more than one instance of a
class?
A. Encapsulation
B. Immutability
C. Singleton
D. Static
|
4. What is the output of this code?
class Laptop extends Computer {
public void startup() {
System.out.print("laptop-");
}
}
public class Computer {

public void startup() {
System.out.print("computer-");
}
public static void main(String[] args) {
Computer computer = new Laptop();
Laptop laptop = new Laptop();
computer.startup();
laptop.startup();
}
}
A. computer-laptop-
B. laptop-computer-
C. laptop-laptop-
D. None of the above
|
5. Which method can be correctly inserted into this class to meet the contract of the
equals() method? You may assume that text is not null.
class Button {
private String text;
public int hashCode() {
return text.hashCode();
}
}
A.
public boolean equals(Object o) {
if ( o == null ) return true;
if (! (o instanceof Button)) return false;
return text.equals(o.text);
}
B.
public boolean equals(Object o) {
if ( o == null ) return true;
Button b = (Button) o;
return text.equals(b.text);
}

C.
public boolean equals(Object o) {
if (! (o instanceof Button)) return false;
return text.equals(o.text);
}
D.
public boolean equals(Object o) {
if (! (o instanceof Button)) return false;
Button b = (Button) o;
return text.equals(b.text);
}
|
6. Fill in the blanks: means the state of an object cannot be changed while
means that it can.
A. Immutability, mutability
B. Rigidity, flexibility
C. Static, instance
D. None of the above
|
7. Which is the first line to fail to compile?
class Tool {
void use() { } // r1
}
class Hammer extends Tool {
private void use() { } // r2
public void bang() { } // r3
}
A. r1
B. r2
C. r3
D. None of the above
|
8. Which of these classes properly implement(s) the singleton pattern?
class ExamAnswers {
private static ExamAnswers instance = new ExamAnswers();
private List<String> answers = new ArrayList<>();

public static List<String> getAnswers() {
return instance.answers;
}
}
class TestAnswers {
private static TestAnswers instance = new TestAnswers();
private List<String> answers = new ArrayList<>();
public static TestAnswers getTestAnswers() {
return instance;
}
public List<String> getAnswers() {
return answers;
}
}
A. ExamAnswers
B. TestAnswers
C. Both classes
D. Neither class
|
9. What does the following print?
public class Transport {
static interface Vehicle {}
static class Bus implements Vehicle {}
public static void main(String[] args) {
Bus bus = new Bus();
boolean n = null instanceof Bus;
boolean v = bus instanceof Vehicle;
boolean b = bus instanceof Bus;
System.out.println(n + " " + v + " " + b);
}
}
A. true true true
B. false true true
C. false false false
D. None of the above

|
10. What technique allows multiple variables from the same class to be shared across all
instances of a class?
A. Encapsulation
B. Immutability
C. Singleton
D. Static
|
11. Which is not a requirement for a class to be immutable?
A. A private constructor is provided.
B. Any instance variables are private.
C. Methods cannot be overridden.
D. There are no setter methods.
|
12. Which statement is true about encapsulation while providing the broadest access allowed?
A. Variables are public and methods are private.
B. Variables are public and methods are public.
C. Variables are private and methods are public.
D. Variables are private and methods are private.
|
13. What does the following print?
class Laptop extends Computer {
String type = "laptop";
}
public class Computer {
String type = "computer";
public static void main(String[] args) {
Computer computer = new Laptop();
Laptop laptop = new Laptop();
System.out.print(computer.type + "," + laptop.type);
}
}
A. computer,laptop
B. laptop,computer
C. laptop,laptop
D. None of the above
|
14. Which of these classes is/are immutable?
public final class Flower {
private final String name;
private final List<Integer> counts;
public Flower(String name, List<Integer> counts) {

this.name = name;
this.counts = counts;
}
public String getName() {
return name;
}
public List<Integer> getCounts() {
return counts;
}
}
public final class Plant {
private final String name;
private final List<Integer> counts;
public Plant(String name, List<Integer> counts) {
this.name = name;
this.counts = new ArrayList<>(counts);
}
public String getName() {
return name;
}
public List<Integer> getCounts() {
return new ArrayList<>(counts);
}
}
A. Flower
B. Plant
C. Both classes
D. Neither class
|
15. Which methods compile?
private static int numShovels;
private int numRakes;
public int getNumShovels() {
return numShovels;
}
public int getNumRakes() {
return numRakes;
}

A. Just getNumRakes()
B. Just getNumShovels()
C. Both methods
D. Neither method
|
16. Which methods compile?
private static int numShovels;
private int numRakes;
public static int getNumShovels() {
return numShovels;
}
public static int getNumRakes() {
return numRakes;
}
A. Just getNumRakes()
B. Just getNumShovels()
C. Both methods
D. Neither method
|
17. How many lines of the main method fail to compile?
11: static interface Vehicle {}
12: static class Bus implements Vehicle {}
13:
14: public static void main(String[] args) {
15: Bus bus = new Bus();
16:
17: System.out.println(null instanceof Bus);
18: System.out.println(bus instanceof Vehicle);
19: System.out.println(bus instanceof Bus);
20: System.out.println(bus instanceof ArrayList);
21: System.out.println(bus instanceof Collection);
22: }
A. One
B. Two
C. Three
D. Four

|
18. Which variable declaration is the first line not to compile?
class Building {}
class House extends Building{}
public void convert() {
Building b = new Building();
House h = new House();
Building bh = new House();
Building p = (House) b;
House q = (Building) h;
Building r = (Building) bh;
House s = (House) bh;
}
A. p
B. q
C. r
D. s
|
19. Which statement is true about the code that can fill in the blank?
class Sticker {
public int hashCode() {
return 1;
}
public boolean equals(Object o) {
return ;
}
}
A. It must return false.
B. It must return true.
C. It can return either true or false.
D. None of the above.
|
20. What change is needed to make Secret well encapsulated?
import java.util.*;
public class Secret {
private int number = new Random().nextInt(10);
public boolean guess(int candidate) {
return number == candidate;
}
}

A. Change number to use a public access modifier.
B. Declare a private constructor.
C. Remove the guess method.
D. None. It is already well encapsulated.
|
21. Which of these classes best implement(s) the singleton pattern?
class ExamAnswers {
private static ExamAnswers instance = new ExamAnswers();
private List<String> answers = new ArrayList<>();
private ExamAnswers() {}
public ExamAnswers getExamAnswers() {
return instance;
}
public List<String> getAnswers() {
return answers;
}
}
class TestAnswers {
private static TestAnswers instance = new TestAnswers();
private List<String> answers = new ArrayList<>();
private TestAnswers() {}
public static TestAnswers getTestAnswers() {
return instance;
}
public List<String> getAnswers() {
return answers;
}
}
A. ExamAnswers
B. TestAnswers
C. Both classes
D. Neither class
|
22. How many lines does the following code output?
public class Cars {
static {
System.out.println("static");
}
private static void drive() {

System.out.println("fast");
}
public static void main(String[] args) {
drive();
drive();
}
}
A. One
B. Two
C. Three
D. None of the above. The code does not compile.
|
23. Which is not a true statement given this diagram?
com.light
Flashlight
• private replaceBulb()
• public turnOn()
Phone
• protected display()
• public charge()
com.dark
Blanket
• wash()
Tent
• private pitch()
• public goCamping()
A. Instance methods in the Blanket class can call the Flashlight class’s turnOn().
B. Instance methods in the Flashlight class can call the Flashlight class’s
replaceBulb().
C. Instance methods in the Phone class can call the Blanket class’s wash().
D. Instance methods in the Tent class can call the Tent class’s pitch().
|
24. Given the diagram in the previous question, how many of the classes can call the
display() method?
A. One
B. Two
C. Three
D. Four
|
25. What does the following print?
1: class SmartWatch extends Watch {
2: private String getType() { return "smart watch"; }
3: public String getName(String suffix) {

4: return getType() + suffix;
5: }
6: }
7: public class Watch {
8: private String getType() { return "watch"; }
9: public String getName(String suffix) {
10: return getType() + suffix;
11: }
12: public static void main(String[] args) {
13: Watch watch = new Watch();
14: SmartWatch smartWatch = new SmartWatch();
15: System.out.print(watch.getName(","));
16: System.out.print(smartWatch.getName(""));
17: }
18: }
A. smart watch,watch
B. watch,smart watch
C. watch,watch
D. None of the above
|
26. What does the following print?
public class Transport {
static interface Vehicle {}
static class Bus implements Vehicle {}
static class Van extends Bus {}
public static void main(String[] args) {
Bus bus = new Van();
Van van = new Van();
Van[] vans = new Van[0];
boolean b = bus instanceof Vehicle;
boolean v = van instanceof Vehicle;
boolean a = vans instanceof Vehicle[];
System.out.println(b + " " + v + " " + a);
}
}

A. true true true
B. false true true
C. true false false
D. None of the above. The code does not compile
|
27. Which of the following correctly fills in the blank so this code compiles and prints true?
public class Button {
private String text;
public int hashCode() {
return text.hashCode();
}
public boolean equals(Object o) {
if ( ) return false;
Button b = (Button) o;
return text.equals(b.text);
}
public static void main(String[] args) {
Button b1 = new Button();
Button b2 = new Button();
b1.text = "mickey";
b2.text = "mickey";
System.out.println(b1.equals(b2));
}
}
A. (o instanceof Button)
B. (o instanceOf Button)
C. !(o instanceof Button)
D. !(o instanceOf Button)
|
28. Which is the first line to fail to compile?
class Tool {
void use() { } // r1
}
class Hammer extends Tool {
private void use(String s) { } // r2
public void bang() { } // r3
}

A. r1
B. r2
C. r3
D. None of the above
|
29. What is lazy instantiation?
A. A technique that can be used in an immutable class to wait until the first use to create
the object
B. A technique that can be used in a singleton to wait until the first use to create the
object
C. A technique that can be used in an immutable class to save memory when creating the
object
D. A technique that can be used in a singleton to save memory when creating the object
|
30. Which variable declaration is the first line not to compile?
30: class Building {}
31: class House extends Building{}
32:
33: public void convert() {
34: Building b = new Building();
35: House h = new House();
36: Building bh = new House();
37: House p = (House) b;
38: House q = (House) h;
39: House r = (House) bh;
40: }
A. p
B. q
C. r
D. None of the above
|
31. Which statement about encapsulation is not true?
A. Encapsulation allows putting extra logic in the getter and setter methods.
B. Encapsulation can use immutable instance variables in the implementation.
C. Encapsulation causes two classes to be more tightly tied together.
D. Encapsulation makes it easier to change the instance variables in the future.
|
32. Which of these classes is/are immutable?
public class Flower {
private final String name;

private final List<Integer> counts;
public Flower(String name, List<Integer> counts) {
this.name = name;
this.counts = new ArrayList<>(counts);
}
public final String getName() {
return name;
}
public final List<Integer> getCounts() {
return new ArrayList<>(counts);
}
}
public class Plant {
private final String name;
private final List<Integer> counts;
public Plant(String name, List<Integer> counts) {
this.name = name;
this.counts = new ArrayList<>(counts);
}
public String getName() {
return name;
}
public List<Integer> getCounts() {
return new ArrayList<>(counts);
}
}
A. Flower
B. Plant
C. Both classes
D. Neither class
|
33. How many lines does the following code output?
public class Cars {
private static void drive() {
static {
System.out.println("static");
}
System.out.println("fast");

}
public static void main(String[] args) {
drive();
drive();
}
}
A. One
B. Two
C. Three
D. None of the above. The code does not compile.
|
34. How many of the following pairs of values can fill in the blanks to comply with the
contract
of the hashCode() and equals() methods?
class Sticker {
public int hashCode() {
return ;
}
public boolean equals(Object o) {
return ;
}
}
I. 1, false
II. 1, true
III. new Random().nextInt(), false
IV. new Random().nextInt(), true
A. None
B. One
C. Two
D. Three
|
35. How do you change the value of an instance variable in an immutable class?
A. Call the setter method.
B. Remove the final modifier and set the instance variable directly.
C. Use a method other than Option A or B.
D. You can’t.

|
36. Which technique or pattern requires instance variables to implement?
A. Is-a
B. Object composition
C. Singleton
D. None of the above
|
37. How many lines of output does the following generate?
public class HowMany {
static {
System.out.println("any");
}
{
System.out.println("more");
}
public static void main(String[] args) {
new HowMany();
new HowMany();
}
}
A. Two
B. Three
C. Four
D. None of the above. The code does not compile.
|
38. Which is the first line to fail to compile?
class Tool {
default void use() { } // r1
}
class Hammer extends Tool {
public void use() { } // r2
public void bang() { } // r3
}
A. r1
B. r2
C. r3
D. None of the above

|
39. Which variable declaration is the first line to throw a ClassCastException at runtime?
class Building {}
class House extends Building{}
public void convert() {
Building b = new Building();
House h = new House();
Building bh = new House();
House p = (House) b;
House q = (House) h;
House r = (House) bh;
}
A. p
B. q
C. r
D. None of the above
|
40. Which of the following values can fill in the blank for the class to be correctly
implemented?
class Sticker {
public int hashCode(Object o) {
return ;
}
public boolean equals(Object o) {
return true;
}
}
I. -1
II. 5
III. new Random().nextInt()
A. I
B. I and II
C. I, II, and III
D. I and III

|
1. Which of the following is required for all valid lambda expressions?
A. ()
B. ->
C. {}
D. Parameter data type(s)
|
2. What is the output of the following application?
package holiday;
enum DaysOff {
Thanksgiving, PresidentsDay, ValentinesDay
}
public class Vacation {
public static void main(String... unused) {
final DaysOff input = DaysOff.Thanksgiving;
switch(input) {
default:
case DaysOff.ValentinesDay:
System.out.print("1");
case DaysOff.PresidentsDay:
System.out.print("2");
}
}
}
A. 1
B. 2
C. 12
D. None of the above
|
3. Fill in the blanks: A functional interface must contain or inherit and may
optionally include .
A. at least one abstract method, the @Override annotation
B. exactly one method, static methods
C. exactly one abstract method, the @FunctionalInterface annotation
D. at least one static method, at most one default method
|
4. Which of the following class types cannot be marked final or abstract?
A. Static nested class
B. Local inner class
C. Anonymous inner class
D. Member inner class

|
5. Which of the following is a valid lambda expression?
A. r -> {return 1==2}
B. (q) -> true
C. (x,y) -> {int test; return test>0;}
D. a,b -> true
|
6. Which of the following properties of an enum can be marked abstract?
A. The enum class definition
B. An enum method
C. An enum value
D. None of the above
|
7. What is the output of the following application?
package world;
public class Matrix {
private int level = 1;
class Deep {
private int level = 2;
class Deeper {
private int level = 5;
public void printReality() {
System.out.print(level);
System.out.print(" "+Matrix.Deep.this.level);
System.out.print(" "+Deep.this.level);
}
}
}
public static void main(String[] bots) {
Matrix.Deep.Deeper simulation = new Matrix().new Deep().new Deeper();
simulation.printReality();
}
}
A. 1 1 2
B. 5 2 2
C. 5 2 1
D. The code does not compile.

|
8. A local inner class can access which type of local variables?
I. final
II. private
III. effectively final
A. I only
B. I and II
C. III only
D. I and III
|
9. What is the output of the following application?
package finance;
enum Currency {
DOLLAR, YEN, EURO
}
abstract class Provider {
protected Currency c = Currency.EURO;
}
public class Bank extends Provider {
protected Currency c = Currency.DOLLAR;
public static void main(String[] pennies) {
int value = 0;
switch(new Bank().c) {
case 0:
value--; break;
case 1:
value++; break;
}
System.out.print(value);
}
}
A. 0
B. 1
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
10. What statement best describes the notion of effectively final in Java?
A. A local variable that is marked final
B. A static variable that is marked final
C. A local variable that is not marked final but whose primitive value or object reference
does not change after it is initialized
D. A local variable that is not marked final but whose primitive value or object reference
does not change after a certain point in the method
|
11. What is the output of the following application?
package race;
interface Drive {
int SPEED = 5;
default int getSpeed() { return SPEED; }
}
interface Hover {
int MAX_SPEED = 5;
default int getSpeed() { return MAX_SPEED; }
}
public class Car implements Drive, Hover {
public static void main(String[] gears) {
class RaceCar extends Car {
@Override public int getSpeed() { return 10; }
};
System.out.print(new RaceCar().getSpeed());
}
}
A. 5
B. 10
C. The code does not compile due to the definition of Racecar.
D. The code does not compile for some other reason.
|
12. Fill in the blanks: It is possible to extend an but not an
.
A. interface, abstract class
B. abstract class, enum
C. enum, interface
D. abstract class, interface

|
13. Which of the following results is not a possible output of this program?
package sea;
enum Direction { NORTH, SOUTH, EAST, WEST; };
public class Ship {
public static void main(String[] compass) {
System.out.print(Direction.valueOf(compass[0]));
}
}
A. WEST is printed.
B. south is printed.
C. An ArrayIndexOutOfBoundsException is thrown at runtime.
D. An IllegalArgumentException is thrown at runtime.
|
14. Which of the following is not an advantage of using enumerated types in Java?
A. Ensure consistency of data across an application.
B. Offer ability to create new enumerated values at runtime.
C. Provide access to fixed constants whose value does not change during the course of the
application.
D. Support cases where a value can only take one of a limited number of options.
|
15. Given the following enum declaration, how many lines contain compilation errors?
package rainbow;
enum Light {}
public enum Color extends Light {
RED, BLUE, ORANGE, GREEN
protected Color() {}
}
A. None, the code compiles as is.
B. One
C. Two
D. Three
|
16. Which of the following cannot include a static method in its definition?
A. Abstract class
B. Static nested class
C. Interface
D. Local inner class

|
17. What is the output of the following application?
package ai;
interface Pump {
void pump(double psi);
}
interface Bend extends Pump {
void bend(double tensileStrength);
}
public class Robot {
public static final void apply(Bend instruction, double input) { // r1
instruction.bend(input);
}
public static void main(String... future) {
final Robot r = new Robot();
r.apply(x -> System.out.print(x+" bent!"), 5);
}
}
A. 5.0 bent!
B. The code does not compile because Bend is not a functional interface.
C. The code does not compile because of line r1.
D. None of the above.
|
18. What is the best reason for applying the @Override annotation to a method?
A. It is required to implement an interface method.
B. It is required to override a method.
C. The method will fail to compile if it is not actually overriding another method.
D. There are no good reasons other than as a form of documentation.
|
19. What is the output of the following application?
package space;
public class Bottle {
public static class Ship {
private enum Sail { // w1
TALL {protected int getHeight() {return 100;}},
SHORT {protected int getHeight() {return 2;}};
protected abstract int getHeight();
}
public Sail getSail() {

return Sail.TALL;
}
}
public static void main(String[] stars) {
Bottle bottle = new Bottle();
Ship q = bottle.new Ship(); // w2
System.out.print(q.getSail());
}
}
A. TALL
B. The code does not compile because of line w1.
C. The code does not compile because of line w2.
D. The code compiles but the application does not produce any output at runtime.
|
20. Which of the following is not a valid lambda expression?
A. (Integer j, k) -> 5
B. (p,q) -> p+q
C. (Integer x, Integer y) -> x*y
D. (left,right) -> {return "null";}
|
21. What is the output of the following application?
1: package fruit;
2:
3: interface Edible { void eat(); }
4: public class ApplePicking {
5: public static void main(String[] food) {
6: Edible apple = new Edible() {
7: @Override
8: void eat() {
9: System.out.print("Yummy!");
10: }
11: }
12: }
13: }
A. The application completes without printing anything.
B. Yummy!
C. One line of this application fails to compile.
D. Two lines of this application fail to compile.

|
22. What is the output of the following application?
package forest;
public class Woods {
static class Tree {}
public static void main(String[] leaves) {
int water = 10+5;
final class Oak extends Tree { // p1
public int getWater() {
return water; // p2
}
}
System.out.print(new Oak().getWater());
}
}
A. 15
B. The code does not compile because of line p1.
C. The code does not compile because of line p2.
D. None of the above
|
23. Fill in the blanks: allow Java to support multiple inheritance, and
anonymous inner classes can of them.
A. Abstract classes, extend at most one
B. Abstract classes, extend any number
C. Interfaces, implement at most one
D. Interfaces, implement any number
|
24. What is the output of the following application?
package vessel;
class Problem extends Exception {}
abstract class Danger {
protected abstract void isDanger() throws Problem;
}
public class SeriousDanger extends Danger {
protected void isDanger() throws Exception { // m1
throw new RuntimeException();
}
public static void main(String[] will) throws Throwable { // m2
new SeriousDanger().isDanger(); // m3
}
}

A. The code does not compile because of line m1
B. The code does not compile because of line m2.
C. The code does not compile because of line m3.
D. The code compiles but throws an exception at runtime.
|
25. Which of the following is not a true statement about interfaces and abstract classes?
A. Interfaces can only extend other interfaces, while abstract classes can extend both
abstract and concrete classes.
B. Unlike abstract classes, interfaces can be marked final.
C. Abstract classes offer support for single inheritance, while interfaces offer support for
multiple inheritance.
D. All methods and variables in interfaces are public, while abstract classes can
use various access modifiers for their methods and variables, including private
in some cases.
|
26. What is the output of the following application?
package weather;
public class Forecast {
public enum Snow { BLIZZARD, SQUALL, FLURRY }
public static void main(String[] modelData) {
System.out.print(Snow.BLIZZARD.ordinal());
System.out.print(" "+Snow.valueOf("flurry".toUpperCase()).name());
}
}
A. 0 FLURRY
B. 1 FLURRY
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
27. Fill in the blank: The primary reason default interface methods were added to Java is to
support .
A. polymorphism
B. concrete methods in interfaces
C. multiple inheritance
D. backward compatibility
|
28. What is the output of the following application?
package zoo;
public class Penguin {

private int volume = 1;
private class Chick {
private static int volume = 3;
void chick() {
System.out.print("Honk("+Penguin.this.volume+")!");
}
}
public static void main(String... eggs) {
Penguin pen = new Penguin();
final Penguin.Chick littleOne = pen.new Chick();
littleOne.chick();
}
}
A. Honk(1)!
B. Honk(3)!
C. The code does not compile.
D. The code compiles but the output cannot be determined until runtime.
|
29. Let’s say Dinosaur is a class that contains a public member inner class called
Pterodactyl. Given that dino is an instance of Dinosaur, how would you instantiate a
new Pterodactyl from within a static method, such as main()?
A. new Pterodactyl();
B. dino.Pterodactyl();
C. Dinosaur.new Pterodactyl();
D. dino.new Pterodactyl();
|
30. What is the result of compiling the following program?
package desert;
interface CanBurrow {
public abstract void burrow();
}
@FunctionalInterface interface HasHardShell extends CanBurrow {} // k1
abstract class Tortoise implements HasHardShell { // k2
public abstract int toughness();
}
public class DesertTortoise extends Tortoise { // k3
public int toughness() { return 11; }
}

A. The code does not compile because of line k1.
B. The code does not compile because of line k2.
C. The code does not compile because of line k3.
D. The code compiles without issue.
|
31. Which statement(s) about the following Twins class are true?
package clone;
interface Alex {
default void write() {}
static void publish() {}
void think();
}
interface Michael {
public default void write() {}
public static void publish() {}
public void think();
}
public class Twins implements Alex, Michael {
@Override public void write() {}
@Override public static void publish() {}
@Override public void think() {
System.out.print("Thinking...");
}
}
I. The class fails to compile because of the write() method.
II. The class fails to compile because of the publish() method.
III. The class fails to compile because of the think() method.
A. I only
B. II only
C. I and II
D. II and III
|
32. Fill in the blanks: A(n) and a(n) can define
static methods.
A. abstract class, local inner class
B. anonymous inner class, interface
C. member inner class, enum
D. enum, static inner class

|
33. Which lambda expression can replace the instance of new BiologyMaterial() in the
Scientist class and produce the same results under various inputted values?
package university;
@FunctionalInterface interface Study {
abstract int learn(String subject, int duration);
}
class BiologyMaterial implements Study {
@Override public int learn(String subject, int duration) {
if(subject == null)
return duration;
else
return duration+1;
}
}
public class Scientist {
public static void main(String[] courses) {
final Study s = new BiologyMaterial() {};
System.out.print(s.learn(courses[0], Integer.parseInt(courses[1])));
}
}
A. (p,q) -> q==null ? p : p+1
B. (c,d) -> {int d=1; return c!=null ? d+1 : d;}
C. (x,y) -> {return x==null ? y : y+1;}
D. None of the above
|
34. Given the following enum declaration, how many lines contain compilation errors?
package myth;
public enum Proposition {
TRUE(-10) { @Override String getNickName() { return "RIGHT"; }},
FALSE(-10) { public String getNickName() { return "WRONG"; }},
UNKNOWN(0) { @Override public String getNickName() { return "LOST"; }}
private final int value;
Proposition(int value) {
this.value = value;
}
public int getValue() {

return this.value;
}
protected abstract String getNickName();
}
A. None. The code compiles as is.
B. One
C. Two
D. Three
|
35. What is the output of the following application?
package math;
interface AddNumbers {
int add(int x, int y);
static int subtract(int x, int y) { return x-y; }
default int multiply(int x, int y) { return x*y; }
}
public class Calculator {
protected void calculate(AddNumbers add, int a, int b) {
System.out.print(add.add(a, b));
}
public static void main(String[] moreNumbers) {
final Calculator ti = new Calculator();
ti.calculate((k,p) -> p+k+1, 2, 5); // j1
}
}
A. 8
B. The code does not compile because AddNumbers is not a functional interface.
C. The code does not compile because of line j1.
D. None of the above
|
36. Given the class declaration below, what expression can be used to fill in the blank to return
the size variable defined in the Bottle class, printing 14 at runtime?
package baby;
final public class Bottle {
final private int size = 14;
final protected class Insert {

private final int size = 25;
public final int getSize() {
return ;
}
}
final Insert insert = new Insert();
final public static void main(String[] feed) {
System.out.print(new Bottle().insert.getSize());
}
}
A. Bottle.this.size
B. this.size
C. this.Bottle.size
D. The code does not compile, regardless of what is placed in the blank.
|
37. What is the output of the following application?
package ocean;
abstract interface CanSwim {
public void swim();
}
public class Turtle {
public static void main(String[] seaweed) {
int distance = 7;
CanSwim seaTurtle = {
@Override
public void swim() {
System.out.print(distance);
}
};
seaTurtle.swim();
}
}
A. The application completes without printing anything.
B. 7
C. One line of this application fails to compile.
D. Two lines of this application fail to compile.

|
38. What is the output of the following application?
package present;
interface Toy { String play(); }
public class Gift {
public static void main(String[] matrix) {
abstract class Robot {}
class Transformer extends Robot implements Toy {
public String name = "GiantRobot";
public String play() {return "DinosaurRobot";}
}
Transformer prime = new Transformer () {
public String play() {return name;} // y1
};
System.out.print(prime.play()+" "+name);
}
}
A. GiantRobot GiantRobot
B. GiantRobot DinosaurRobot
C. The code does not compile because of line y1.
D. None of the above
|
39. What is the result of compiling the following program?
package ballroom;
class Leader {}
class Follower {}
abstract public class Dancer {
public Leader getPartner() { return new Leader(); }
abstract public Leader getPartner(int count); // u1
}
abstract class SwingDancer extends Dancer {
public Follower getPartner() { // u2
return new Follower(); // u3
}
}

A. The code does not compile because of line u1.
B. The code does not compile because of line u2.
C. The code does not compile because of line u3.
D. The code compiles without issue.
|
40. What is the output of the following application?
package prepare;
public class Ready {
protected static int first = 2;
private final short DEFAULT_VALUE = 10;
private static class GetSet {
int first = 5;
static int second = DEFAULT_VALUE;
}
private GetSet go = new GetSet();
public static void main(String[] begin) {
Ready r = new Ready();
System.out.print(r.go.first);
System.out.print(", "+r.go.second);
}
}
A. 2, 5
B. 5, 10
C. The code does not compile because of the GetSet class body.
D. The code does not compile for another reason.


|
1. Which of the following can fill in the blank to make the code compile?
public class News< > {}
I. ?
II. News
III. Object
A. None of them
B. I
C. II and III
D. I, II, and III
|
2. Which method is available on both List and Stream implementations?
A. filter()
B. forEach()
C. replace()
D. sort()
|
3. We are running a library. Patrons select books by name. They get at the back of the checkout
line. When they get to the front, they scan the book’s ISBN. The checkout system finds
the book based on this number and marks the book as checked out. Of these choices, which
data structures best represent the line to check out the book and the book lookup to mark it
as checked out, respectively?
A. ArrayDeque, TreeMap
B. ArrayDeque, TreeSet
C. ArrayList, TreeMap
D. ArrayList, TreeSet
|
4. Which cannot fill in the blank for this code to compile?
Collection<String> c = new <>();
c.add("pen");
c.remove("pen");
System.out.println(c.isEmpty());
A. ArrayDeque
B. TreeMap
C. TreeSet
D. All of these can fill in the blank.

|
5. Suppose we want to implement a Comparator<String> so that it sorts the longest
strings first. You may assume there are no nulls. Which method could implement such a
comparator?
A.
public int compare(String s1, String s2) {
return s1.length() - s2.length();
}
B.
public int compare(String s1, String s2) {
return s2.length() – s1.length();
}
C.
public int compare(Object obj1, object obj2) {
String s1 = (String) obj1;
String s2 = (String) obj2;
return s1.length() - s2.length();
}
D.
public int compare(Object obj1, object obj2) {
String s1 = (String) obj1;
String s2 = (String) obj2;
return s2.length() – s1.length();
}
|
6. Suppose we want to store JellyBean objects. Which of the following pairs require
JellyBean to implement the Comparable interface or create a Comparator in order
to add them to the Collection?
A. ArrayList and ArrayDeque
B. HashMap and HashSet
C. HashMap and TreeMap
D. TreeMap and TreeSet
|
7. What is a common reason for a stream pipeline not to run?
A. The source doesn’t generate any items.
B. There are no intermediate operations.
C. The terminal operation is missing.
D. None of the above

|
8. We want this code to print the titles of each book twice. Why doesn’t it?
LinkedList<String> list = new LinkedList<>();
list.add("Grapes of Wrath");
list.add("1984");
list.forEach(System.out::println);
Iterator it = list.iterator();
while (it.hasMore())
System.out.println(it.next());
A. The generic type of Iterator is missing.
B. The hasMore() method should be changed to hasNext().
C. The iteration code needs to be moved before the forEach() since the stream is used up.
D. None of the above. The code does print each book title twice.
|
9. What is the result of the following?
ArrayList<Integer> list = new ArrayList<>();
list.add(56);
list.add(56);
list.add(3);
TreeSet<Integer> set = new TreeSet<>(list);
System.out.print(set.size());
System.out.print(" " );
System.out.print(set.iterator().next());
A. 2 3
B. 2 56
C. 3 3
D. 3 56
|
10. What best describes a reduction?
A. An intermediate operation where it filters the stream it receives
B. An intermediate operation where it mathematically divides each element in the stream
C. A terminal operation where a single value is generated by reading each element in the
prior step in a stream pipeline

D. A terminal operation where one element is returned from the prior step in a stream
pipeline without reading all the elements
|
11. What is the output of the following?
5: ArrayDeque<Integer> d = new ArrayDeque<>();
6: d.offer(18);
7: d.offer(5);
8: d.push(13);
9: System.out.println(d.poll() + " " + d.poll());
A. 13 18
B. 18 5
C. 18 13
D. None of the above
|
12. What is the output of the following?
class Magazine {
private String name;
public Magazine(String name) {
this.name = name;
}
public int compareTo(Magazine m) {
return name.compareTo(m.name);
}
public String toString() {
return name;
}
}
public class Newstand {
public static void main(String[] args) {
Set<Magazine> set = new TreeSet<>();
set.add(new Magazine("highlights"));
set.add(new Magazine("Newsweek"));
set.add(new Magazine("highlights"));
System.out.println(set.iterator().next());
}
}
A. highlights
B. Newsweek

C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
13. What is the result of the following?
6: List<String> list = new ArrayList<>();
7: list.add("Monday");
8: list.add(String::new);
9: list.add("Tuesday");
10: list.remove(0);
11: System.out.println(list.get(0));
A. An empty String
B. Monday
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
14. How many lines does this code output?
List<String> list = new LinkedList<>();
list.add("Archie");
list.add("X-Men");
list.stream().forEach(s -> System.out.println(s));
list.stream().forEach(s -> System.out.println(s));
A. Two
B. Four
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
15. Which line in the main() method doesn’t compile or points to a class that doesn’t compile?
1: interface Comic<C> {
2: void draw(C c);
3: }
4: class ComicClass<C> implements Comic<C> {
5: public void draw(C c) {
6: System.out.println(c);
7: }
8: }
9: class SnoopyClass implements Comic<Snoopy> {
10: public void draw(Snoopy c) {
11: System.out.println(c);

12: }
13: }
14: class SnoopyComic implements Comic<Snoopy> {
15: public void draw(C c) {
16: System.out.println(c);
17: }
18: }
19: public class Snoopy {
20: public static void main(String[] args) {
21: Comic<Snoopy> c1 = c -> System.out.println(c);
22: Comic<Snoopy> c2 = new ComicClass<>();
23: Comic<Snoopy> c3 = new SnoopyClass();
24: Comic<Snoopy> c4 = new SnoopyComic();
25: }
26: }
A. Line 21
B. Line 22
C. Line 23
D. Line 24
|
16. What is the output of the following?
Stream<String> s = Stream.of("Atlanta", "Chicago", "New York");
long count = s.filter(c -> c.startsWith("C")).count();
System.out.print(count);
A. 1
B. 2
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
17. Fill in the blank to make this code compile:
public class Truck implements Comparable<Truck> {
private int id;
public Truck(int id) {
this.id = id;
}
@Override
{

return id - t.id;
}
}
A. public int compare(Truck t)
B. public int compare(Truck t1, Truck t2)
C. public int compareTo(Truck t)
D. public int compareTo(Truck t1, Truck t2)
|
18. In a stream pipeline, which can return a value other than a Stream?
A. Source
B. Intermediate operation
C. Terminal operation
D. None of the above
|
19. Rewrite this lambda using a constructor reference:
n -> new ArrayList<>(n)
A. ArrayList::new;
B. ArrayList::new();
C. ArrayList::new(n);
D. ArrayList::new[n];
|
20. What is the result of the following?
Comparator<Integer> c = (x, y) -> y-x;
List<Integer> ints = Arrays.asList(3, 1, 4);
Collections.sort(ints, c);
System.out.println(Collections.binarySearch(ints, 1));
A. 0
B. 1
C. The code does not compile.
D. The result is not defined.
|
21. How many lines does this code output?
List<String> list = new LinkedList<>();
list.add("Archie");
list.add("X-Men");
Stream<String> s = list.stream();
s.forEach(System.out::println);
s.forEach(System.out::println);

A. Two
B. Four
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
22. Which option cannot fill in the blank to print Clean socks?
class Wash<T> {
T item;
public void clean(T item) {
System.out.println("Clean " + item);
}
}
public class LaundryTime {
public static void main(String[] args) {
wash.clean("socks");
}
}
A. Wash wash = new Wash();
B. Wash wash = new Wash<String>();
C. Wash<String> wash = new Wash<>();
D. All three can fill in the blank.
|
23. We want this code to print the titles of each book twice. Why doesn’t it?
LinkedList<String> list = new LinkedList<>();
list.add("Grapes of Wrath");
list.add("1984");
list.stream().forEach(System.out::println);
Iterator it = list.iterator();
while (it.hasNext())
System.out.println(it.next());
A. The generic type of Iterator is missing.
B. The hasNext() method should be changed to isNext().
C. The iteration code needs to be moved before the forEach() since the stream is used up.
D. None of the above. The code does print each book title twice.

|
24. Rewrite this lambda using a method reference:
() -> Math.random()
A. Math.random
B. Math::random
C. Math::random()
D. None of the above
|
25. Which operation can occur more than once in a stream pipeline?
Source Intermediate Terminal
A. Source
B. Intermediate operation
C. Terminal operation
D. None of the above
|
26. Which type allows inserting a null value?
A. ArrayDeque
B. ArrayList
C. TreeSet
D. All of these allow nulls.
|
27. Fill in the blank so this code outputs three lines:
List<String> list = new ArrayList<>();
list.add("Atlanta");
list.add("Chicago");
list.add("New York");
list.stream().filter( ).forEach(System.out::println);
A. String::isEmpty
B. ! String::isEmpty
C. String::! isEmpty
D. None of the above
|
28. What is the output of the following?
TreeMap<String, Integer> map = new TreeMap<>();
map.put("3", 3);
map.put("three", 3);

map.put("THREE", 3);
System.out.println(map.firstKey() + " " + map.lastKey());
A. 3 three
B. 3 THREE
C. three 3
D. THREE 3
|
29. Which fills in the blank in the method signature to allow this code to compile?
import java.util.*;
public class ExtendingGenerics {
private static < , U> U add(T list, U element) {
list.add(element);
return element;
}
public static void main(String[] args) {
List<String> values = new ArrayList<>();
add(values, "duck");
add(values, "duck");
add(values, "goose");
System.out.println(values);
}
}
A. ? extends Collection<U>
B. ? implements Collection<U>
C. T extends Collection<U>
D. T implements Collection<U>
|
30. What is the result of the following?
List<String> list = new ArrayList<>();
list.add("Austin");
list.add("Boston");
list.add("San Francisco");
list.removeIf(a -> a.length() > 10);
System.out.println(list.size());
A. 1
B. 2
C. 3
D. None of the above

|
31. What does the following output?
ArrayDeque<Integer> dice = new ArrayDeque<>();
dice.offer(3);
dice.offer(2);
dice.offer(4);
System.out.print(dice.stream().filter(n -> n != 4));
A. 2
B. 3
C. The code does not compile.
D. None of the above
|
32. Which of the following cannot fill in the blank to make the code compile?
private void output( <?> x) {
x.forEach(System.out::println);
}
A. ArrayDeque
B. Collection
C. TreeMap
D. None of the above
|
33. How many lines does this code output?
List<String> list = new LinkedList<>();
list.add("Archie");
list.add("X-Men");
list.stream().forEach(System.out.println);
list.stream().forEach(System.out.println);
A. Two
B. Four
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
34. What is the output of the following?
class Magazine implements Comparable<Magazine> {
private String name;
public Magazine(String name) {
this.name = name;
}
@Override
public int compareTo(Magazine m) {

return name.compareTo(m.name);
}
@Override
public String toString() {
return name;
}
}
public class Newstand {
public static void main(String[] args) {
Set<Magazine> set = new TreeSet<>();
set.add(new Magazine("highlights"));
set.add(new Magazine("Newsweek"));
set.add(new Magazine("highlights"));
System.out.println(set.iterator().next());
}
}
A. highlights
B. Newsweek
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
35. How many lines does the following code output?
import java.util.*;
class Blankie {
String color;
String getColor() {
return color;
}
}
public class PreSchool {
public static void main(String[] args) {
Blankie b1 = new Blankie();
Blankie b2 = new Blankie();
b1.color = "pink";
List<Blankie> list = Arrays.asList(b1, b2);
list.stream().filter(Blankie::getColor).forEach(System.out::println);
}
}

A. One
B. Two
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
36. Which statement about a source in a Stream is true?
A. The source is mandatory in a stream pipeline.
B. The source is only allowed to return primitives.
C. The source must be retrieved by calling the stream() method.
D. The source must return a finite number of elements.
|
37. What does the following output?
List<String> list = new ArrayList<>();
list.add("Austin");
list.add("Boston");
list.add("San Francisco");
long c = list.stream().filter(a -> a.length() > 10).count();
System.out.println(c + " " + list.size());
A. 1 1
B. 1 3
C. 2 3
D. None of the above
|
38. Which options can fill in the blanks to print Cleaned 2 items?
import java.util.*;
class Wash<T Collection> {
T item;
public void clean(T items) {
System.out.println("Cleaned " + items.size() + " items");
}
}
public class LaundryTime {
public static void main(String[] args) {
Wash<List> wash = new
wash.clean(Arrays.asList("sock", "tie")); }
}

A. extends, Wash<ArrayList>();
B. extends, Wash<List>();
C. super, Wash<ArrayList>();
D. super, Wash<List>();
|
39. Which of the following declares a Comparator where all objects are treated as equal?
A. Comparator<Character> comp = (c1)-> 0;
B. Comparator<Character> comp = (c1)-> {0};
C. Comparator<Character> comp = (c1, c2)-> 0;
D. Comparator<Character> comp = (c1, c2)-> {0};
|
40. Why can’t String::charAt be used as a method reference?
A. Method references can only be used on static methods.
B. Method references can pass either the instance or the parameter from the lambda, but
not both.
C. The charAt() method takes an int rather than Integer parameter.
D. There is no charAt() method in the String class.

|
1. Fill in the blanks: The functional interface does not take any inputs,
while the functional interface does not return any data.
A. IntConsumer, LongSupplier
B. IntSupplier, Function
C. Supplier, DoubleConsumer
D. UnaryOperator, Consumer
|
2. Which functional interface takes a long value as an input argument and has an accept()
method?
A. LongConsumer
B. LongFunction
C. LongPredicate
D. LongSupplier
|
3. What is the output of the following application?
package beach;
import java.util.function.*;
class Tourist {
public Tourist(double distance) {
this.distance = distance;
}
public double distance;
}
public class Lifeguard {
private void saveLife(Predicate<Tourist> canSave, Tourist tourist) {
System.out.print(canSave.test(tourist) ? "Saved" : "Too far"); // y1
}
public final static void main(String... sand) {
new Lifeguard().saveLife(s -> s.distance<4, new Tourist(2)); // y2
}
}
A. Saved
B. Too far
C. The code does not compile because of line y1.
D. The code does not compile because of line y2.

|
4. Which of the following statements about DoubleSupplier and Supplier<Double> is
not true?
A. Both are functional interfaces.
B. Lambdas for both can return a double value.
C. Lambdas for both cannot return a null value.
D. One supports a generic type, the other does not.
|
5. Which functional interface, when filled into the blank, allows the class to compile?
package space;
import java.util.function.*;
public class Asteroid {
public void mine( lambda) {
// TODO: Apply functional interface
}
public static void main(String[] debris) {
new Asteroid().mine((s,p) -> s+p);
}
}
A. BiConsumer<Integer,Double>
B. BiFunction<Integer,Double,Double>
C. BiFunction<Integer,Integer,Double>
D. Function<Integer,Double>
|
6. Assuming the proper generic types are used, which lambda expression cannot be assigned
to a ToDoubleBiFunction functional interface reference?
A. (Integer a, Double b) -> {int c; return b;}
B. (h,i) -> (long)h
C. (String u, Object v) -> u.length()+v.length()
D. (x,y) -> {int z=2; return y/z;}
|
7. Which of the following is not a functional interface in the java.util.function package?
A. BiPredicate
B. DoubleUnaryOperator
C. ObjectDoubleConsumer
D. ToLongFunction

|
8. What is the output of the following application?
package zoo;
import java.util.function.*;
public class TicketTaker {
private static int AT_CAPACITY = 100;
public int takeTicket(int currentCount, IntUnaryOperator<Integer> counter) {
return counter.applyAsInt(currentCount);
}
public static void main(String...theater) {
final TicketTaker bob = new TicketTaker();
final int oldCount = 50;
final int newCount = bob.takeTicket(oldCount,t -> {
if(t>AT_CAPACITY) {
throw new RuntimeException("Sorry, max has been reached");
}
return t+1;
});
System.out.print(newCount);
}
}
A. 51
B. The code does not compile because of lambda expression.
C. The code does not compile for a different reason.
D. The code compiles but prints an exception at runtime.
|
9. Which functional interface returns a primitive value?
A. BiPredicate
B. CharSupplier
C. LongFunction
D. UnaryOperator
|
10. Which functional interface, when entered into the blank below, allows the class to compile?
package groceries;
import java.util.*;
import java.util.function.*;
public class Market {

private static void checkPrices(List<Double> prices,
scanner) {
prices.forEach(scanner);
}
public static void main(String[] right) {
List<Double> prices = Arrays.asList(1.2, 6.5, 3.0);
checkPrices(prices,
p -> {
String result = p<5 ? "Correct" : "Too high";
System.out.println(result);
});
}
}
A. Consumer
B. DoubleConsumer
C. Supplier<Double>
D. None of the above
|
11. Which of the following three functional interfaces is not equivalent to the other two?
A. BiFunction<Double,Double,Double>
B. BinaryOperator<Double>
C. DoubleFunction<Double>
D. None of the above. All three are equivalent.
|
12. Which lambda expression can be passed to the magic() method?
package show;
import java.util.function.*;
public class Magician {
public void magic(BinaryOperator<Long> lambda) {
lambda.apply(3L, 7L);
}
}
A. magic((a) -> a)
B. magic((b,w) -> (long)w.intValue())
C. magic((c,m) -> {long c=4; return c+m;})
D. magic((Integer d, Integer r) -> (Long)r+d)

|
13. What is the output of the following program?
package ai;
import java.util.function.*;
public class Android {
public void wakeUp(Supplier supplier) { // d1
supplier.get();
}
public static void main(String... electricSheep) {
Android data = new Android();
data.wakeUp(() -> System.out.print("Program started!")); // d2
}
}
A. Program started!
B. The code does not compile because of line d1 only.
C. The code does not compile because of line d2 only.
D. The code does not compile because of both lines d1 and d2.
|
14. Which statement about all UnaryOperator functional interfaces (generic and primitive) is
correct?
A. The input type must be compatible with the return type.
B. Some of them take multiple arguments.
C. They each take a generic argument.
D. They each return a primitive value.
|
15. Starting with DoubleConsumer and going downward, fill in the missing values for the table.
Functional Interface # Parameters
DoubleConsumer
IntFunction
LongSupplier
ObjDoubleConsumer
A. 0, 1, 1, 1
B. 0, 2, 1, 2
C. 1, 1, 0, 2
D. 1, 1, 0, 1

|
16. Starting with DoubleConsumer and going downward, fill in the values for the table. For the
choices below, assume R is a generic type.
Functional Interface Return Type
DoubleConsumer
IntFunction
LongSupplier
ObjDoubleConsumer
A. double, R, long, R
B. R, int, long, R
C. void, int, R, void
D. void, R, long, void
|
17. Fill in the blanks: In the Collection interface, the method removeIf() takes a
, while the method forEach() takes a .
A. Function, Function
B. Predicate, Consumer
C. Predicate, Function
D. Predicate, UnaryOperator
|
18. What is the output of the following application?
package nesting;
import java.util.function.*;
public class Doll {
private int layer;
public Doll(int layer) {
super();
this.layer = layer;
}
public static void open(UnaryOperator<Doll> task, Doll doll) {
while((doll = task.accept(doll)) != null) {
System.out.print("X");
}
}

public static void main(String[] wood) {
open(s -> {
if(s.layer<=0) return null;
else return new Doll(s.layer––);
}, new Doll(5));
}
}
A. XXXXX
B. The code does not compile because of the lambda expression.
C. The code does not compile for a different reason.
D. The code compiles but produces an infinite loop at runtime.
|
19. Which functional interface has a get() method?
A. Consumer
B. Function
C. Supplier
D. UnaryOperator
|
20. The following diagram shows input arguments being applied to three functional interfaces
of unknown type. Which three functional interfaces, inserted in order from left to right,
could be used to complete the diagram?
int
? ? ? int
int
Double
A. DoubleBinaryOperator
ToDoubleBiFunction<Integer,Double>
UnaryOperator<Integer>
B. BinaryOperator<Double>
BiFunction<Integer,Integer,Double>
UnaryOperator<Integer>
C. Function<Double,Integer>
BiFunction<Integer,Integer,Double>
DoubleToIntFunction
D. BiFunction<Integer,Double,Integer>
BinaryOperator<Integer>
IntUnaryOperator

|
21. Which statement about functional interfaces and lambda expressions is not true?
A. A lambda expression may be compatible with multiple functional interfaces.
B. A lambda expression must be assigned to a functional interface when it is declared.
C. A method can return a lambda expression in the form of a functional interface
instance.
D. The compiler uses deferred execution to skip determining whether a lambda expression
compiles or not.
|
22. Which expression is compatible with the IntSupplier functional interface?
A. () -> 1<10 ? "3" : 4
B. () -> {return 1/0;}
C. () -> return 4
D. System.out::print
|
23. What is the output of the following application?
package tps;
import java.util.*;
class Boss {
private String name;
public Boss(String name) {
this.name = name;
}
public String getName() {return name.toUpperCase();}
public String toString() {return getName();}
}
public class Initech {
public static void main(String[] reports) {
final List<Boss> bosses = new ArrayList(8);
bosses.add(new Boss("Jenny"));
bosses.add(new Boss("Ted"));
bosses.add(new Boss("Grace"));
bosses.removeIf(s -> s.equalsIgnoreCase("ted"));
System.out.print(bosses);
}
}
A. [JENNY, GRACE]
B. [tps.Boss@4218224c, tps.Boss@815f19a]
C. The code does not compile because of the lambda expression.
D. The code does not compile for a different reason.

|
24. Which of the following method references can be passed to a method that takes
Consumer<Object> as an argument?
I. ArrayList::new
II. String::new
III. System.out::println
A. I only
B. I, II, and III
C. I and III
D. III only
|
25. Which of the following is a valid functional interface in the java.util.function package?
A. FloatPredicate
B. ToDoubleBiFunction
C. UnaryIntOperator
D. TriPredicate
|
26. Which functional interface, when filled into the blank, prevents the class from compiling?
package morning;
import java.util.function.*;
public class Sun {
public static void dawn( sunrise) {}
public void main(String... rays) {
dawn(s -> s+1);
}
}
A. DoubleUnaryOperator
B. Function<String,String>
C. IntToLongFunction
D. UnaryOperator
|
27. Which functional interface does not have the correct number of generic arguments?
A. BiFunction<T,U,R>
B. DoubleFunction<T,R>
C. ToDoubleFunction<T>
D. ToIntBiFunction<T,U>

|
28. Which lambda expression, when filled into the blank, allows the code to compile?
package ballroom;
import java.util.function.*;
public class Dance {
public static Integer rest(BiFunction<Integer,Double,Integer> takeABreak) {
return takeABreak.apply(3, 10.2);
}
public static void main(String[] participants) {
rest( );
}
}
A. (int n, double e) -> (int)(n+e)
B. (n,w,e) -> System.out::print
C. (s,w) -> 2*w
D. (s,e) -> s.intValue()+e.intValue()
|
29. Fill in the blank: is the only functional interface that does not involve
double, int, or long.
A. BooleanSupplier
B. CharPredicate
C. FloatUnaryOperator
D. ShortConsumer
|
30. What is the output of the following application?
package savings;
import java.util.function.*;
public class Bank {
private int savingsInCents;
private static class ConvertToCents {
static DoubleToIntFunction f = p -> p*100;
}
public static void main(String... currency) {
Bank creditUnion = new Bank();
creditUnion.savingsInCents = 100;
double deposit = 1.5;
creditUnion.savingsInCents += ConvertToCents.f.applyAsInt(deposit); // j1

System.out.print(creditUnion.savingsInCents);
}
}
A. 200
B. 250
C. The code does not compile because of line j1.
D. None of the above
|
31. Which functional interface takes a double value and has a test() method?
A. DoubleConsumer
B. DoublePredicate
C. DoubleUnaryOperator
D. ToDoubleFunction
|
32. Given the following class, how many lines contain compilation errors?
1: package showtimes;
2: import java.util.*;
3: import java.util.function.*;
4: public class FindMovie {
5: private Function<String> printer;
6: protected FindMovie() {
7: printer = s -> {System.out.println(s); return s;}
8: }
9: void printMovies(List<String> movies) {
10: movies.forEach(printer);
11: }
12: public static void main(String[] screen) {
13: List<String> movies = new ArrayList<>();
14: movies.add("Stream 3");
15: movies.add("Lord of the Recursion");
16: movies.add("Silence of the Lambdas");
17: new FindMovie().printMovies(movies);
18: }
19: }
A. None. The code compiles as is.
B. One
C. Two
D. Three

|
33. Which lambda expression cannot be assigned to a DoubleToLongFunction functional
interface?
A. a -> null==null ? 1 : 2L
B. e -> (int)(10.0*e)
C. (double m) -> {long p = (long)m; return p;}
D. (Double s) -> s.longValue()
|
34. Which of the following is not a functional interface in the java.util.function package?
A. DoublePredicate
B. LongUnaryOperator
C. ShortSupplier
D. ToIntBiFunction
|
35. Which functional interface, when filled into the blank, allows the class to compile?
package sleep;
import java.util.function.*;
class Sheep {}
public class Dream {
int MAX_SHEEP = 10;
int sheepCount;
public void countSheep( backToSleep) {
while(sheepCount<MAX_SHEEP) {
// TODO: Apply lambda
sheepCount++;
}
}
public static void main(String[] dark) {
new Dream().countSheep(System.out::println);
}
}
A. Consumer<Sheep>
B. Function<Sheep,void>
C. UnaryOperator<Sheep>
D. None of the above

|
36. What is the output of the following application?
package pet;
import java.util.*;
import java.util.function.*;
public class DogSearch {
void reduceList(List<String> names, Predicate<String> tester) {
names.removeIf(tester);
}
public static void main(String[] treats) {
int MAX_LENGTH = 2;
DogSearch search = new DogSearch();
List<String> names = new ArrayList<>();
names.add("Lassie");
names.add("Benji");
names.add("Brian");
MAX_LENGTH += names.size();
search.reduceList(names, d -> d.length()>MAX_LENGTH);
System.out.print(names.size());
}
}
A. 2
B. 3
C. The code does not compile because of lambda expression.
D. The code does not compile for a different reason.
|
37. Which functional interface takes two values and has an apply() method?
A. BiConsumer
B. BiFunction
C. BiPredicate
D. DoubleBinaryOperator
|
38. Which of the following lambda expressions can be passed to a method that takes
IntFunction<Integer> as an argument?
I. (Integer f) -> f
II. (v) -> null
III. s -> s
A. I, II, and III
B. II and III only
C. III only
D. None of the above

|
39. What is the output of the following application?
package lot;
import java.util.function.*;
public class Warehouse {
private int quantity = 40;
private final BooleanSupplier stock;
{
stock = () -> quantity>0;
}
public void checkInventory() {
if(stock.get())
System.out.print("Plenty!");
else {
System.out.print("On Backorder!");
}
}
public static void main(String... widget) {
final Warehouse w13 = new Warehouse();
w13.checkInventory();
}
}
A. Plenty!
B. On Backorder!
C. The code does not compile because of the checkInventory() method.
D. The code does not compile for a different reason.
|
40. Which of the following statements about functional interfaces is true?
A. It is possible to define a functional interface that returns two data types.
B. It is possible to define a primitive functional interface that uses float, char, or short.
C. It is not possible to define a functional interface that does not take any arguments nor
return any value.
D. None of the primitive functional interfaces include generic arguments.

|
1. Which of the following fills in the blank so that the code outputs one line but uses a poor
practice?
import java.util.*;
public class Cheater {
int count = 0;
public void sneak(Collection<String> coll) {
coll.stream(). ;
}
public static void main(String[] args) {
Cheater c = new Cheater();
c.sneak(Arrays.asList("weasel"));
}
}
A. peek(System.out::println)
B. peek(System.out::println).findFirst()
C. peek(r -> System.out.println(r)).findFirst()
D. peek(r -> {count++; System.out.println(r); }).findFirst()
|
2. Which can fill in the blank to have the code print true?
Stream<Integer> stream = Stream.iterate(1, i -> i+1);
boolean b = stream. (i -> i > 5);
System.out.println(b);
A. anyMatch
B. allMatch
C. noneMatch
D. None of the above
|
3. On a DoubleStream, how many of the methods average(), count(), and sum() return an
OptionalDouble?
A. None
B. One
C. Two
D. Three

|
4. How many of the following can fill in the blank to have the code print 44?
Stream<String> stream = Stream.of("base", "ball");
stream. (s -> s.length()).forEach(System.out::print);
I. map
II. mapToInt
III. mapToObject
A. None
B. One
C. Two
D. Three
|
5. What is the result of the following?
IntStream s = IntStream.empty();
System.out.print(s.average().getAsDouble());
A. The code prints 0.
B. The code prints 0.0.
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
6. Which of these stream pipeline operations takes a Predicate as a parameter and returns
an Optional?
A. anyMatch()
B. filter()
C. findAny()
D. None of the above
|
7. What is the result of the following?
List<Double> list = new ArrayList<>();
list.add(5.4);
list.add(1.2);
Optional<Double> opt = list.stream().sorted().findFirst();
System.out.println(opt.get() + " " + list.get(0));
A. 1.2 1.2
B. 1.2 5.4
C. 5.4 5.4
D. None of the above

|
8. Fill in the blank so this code prints 8.0.
IntStream stream = IntStream.of(6, 10);
LongStream longs = stream.mapToLong(i -> i);
System.out.println( );
A. longs.average().get()
B. longs.average().getAsDouble()
C. longs.getAverage().get()
D. longs.getAverage().getAsDouble()
|
9. How many of these collectors can fill in the blank to make this code compile?
Stream<Character> chars = Stream.of(
'o', 'b', 's', 't', 'a', 'c', 'l', 'e');
chars.map(c -> c).collect(Collectors. );
I. toArrayList()
II. toList()
III. toMap()
A. None
B. One
C. Two
D. Three
|
10. What does the following output?
import java.util.*;
public class MapOfMaps {
public static void main(String[] args) {
Map<Integer, Integer> map = new HashMap<>();
map.put(9, 3);
Map<Integer, Integer> result = map.stream().map((k,v) -> (v,k));
System.out.println(result.keySet().iterator().next());
}
}
A. 3
B. 9
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
11. Which of the following creates an Optional that returns true when calling
opt.isPresent()?
I. Optional<String> opt = Optional.empty();
II. Optional<String> opt = Optional.of(null);
III. Optional<String> opt = Optional.ofNullable(null);
A. I
B. I and II
C. I and III
D. None of the above
|
12. What is the output of the following?
Stream<String> s = Stream.of("speak", "bark", "meow", "growl");
BinaryOperator<String> merge = (a, b) -> a;
Map<Integer, String> map = s.collect(toMap(String::length, k -> k, merge));
System.out.println(map.size() + " " + map.get(4));
A. 2 bark
B. 2 meow
C. 4 bark
D. None of the above
|
13. What is the output of the following?
1: package reader;
2: import java.util.stream.*;
3:
4: public class Books {
5: public static void main(String[] args) {
6: IntegerStream pages = IntegerStream.of(200, 300);
7: IntegerSummaryStatistics stats = pages.summaryStatistics();
8: long total = stats.getSum();
9: long count = stats.getCount();
10: System.out.println(total + "-" + count);
11: }
12: }
A. 500-0
B. 500-2
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
14. If this method is called with Stream.of("hi"), how many lines are printed?
public static void print(Stream<String> stream) {
Consumer<String> print = System.out::println;
stream.peek(print)
.peek(print)
.map(s -> s)
.peek(print)
.forEach(print);
}
A. Three
B. Four
C. The code compiles but does not output anything.
D. The code does not compile.
|
15. What is true of the following code?
Stream<Character> stream = Stream.of('c', 'b', 'a'); // z1
stream.sorted().findAny().ifPresent(System.out::println); // z2
A. It is guaranteed to print the single character a.
B. It can print any single character of a, b, or c.
C. It does not compile because of line z1.
D. It does not compile because of line z2.
|
16. Suppose you have a stream pipeline where all the elements are of type String. Which of the
following can be passed to the intermediate operation sorted()?
A. (s,t) -> s.length() - t.length()
B. String::isEmpty
C. Both of these
D. Neither of these
|
17. Fill in the blanks so that both methods produce the same output for all inputs.
private static void longer(Optional<Boolean> opt) {
if (opt. ())
System.out.println("run: " + opt.get());
}
private static void shorter(Optional<Boolean> opt) {
opt.map(x -> "run: " + x). (System.out::println);
}

A. isNotNull, isPresent
B. ifPresent, isPresent
C. isPresent, forEach
D. isPresent, ifPresent
|
18. What is the output of this code?
Stream<Boolean> bools = Stream.iterate(true, b -> !b);
Map<Boolean, List<Boolean>> map = bools.limit(1)
.collect(partitioningBy(b -> b));
System.out.println(map);
A. {true=[true]}
B. {false=null, true=[true]}
C. {false=[], true=[true]}
D. None of the above
|
19. What does the following output?
Set<String> set = new HashSet<>();
set.add("tire-");
List<String> list = new LinkedList<>();
Deque<String> queue = new ArrayDeque<>();
queue.push("wheel-");
Stream.of(set, list, queue)
.flatMap(x -> x.stream())
.forEach(System.out::print);
A. [tire-][wheel-]
B. tire-wheel-
C. None of the above.
D. The code does not compile.
|
20. What is the output of the following?
Stream<String> s = Stream.of("over the river",
"through the woods",
"to grandmother's house we go");
s.filter(n -> n.startsWith("t"))
.sorted(Comparator::reverseOrder)
.findFirst()
.ifPresent(System.out::println);

A. over the river
B. through the woods
C. to grandmother's house we go
D. None of the above
|
21. Which fills in the blank so the code is guaranteed to print 1?
Stream<Integer> stream = Stream.of(1, 2, 3);
System.out.println(stream. );
A. findAny()
B. first()
C. min()
D. None of the above
|
22. Which of the following can be the type for x?
private static void spot( x) {
x.filter(y -> ! y.isEmpty())
.map(y -> 8)
.ifPresent(System.out::println);
}
I. List<String>
II. Optional<Collection>
III. Optional<String>
IV. Stream<Collection>
A. I
B. IV
C. II and III
D. II and IV
|
23. Which can fill in the blank to have the code print true?
Stream<Integer> stream = Stream.iterate(1, i -> i);
boolean b = stream. (i -> i > 5);
System.out.println(b);
A. anyMatch
B. allMatch
C. noneMatch
D. None of the above

|
24. What collector turns the stream at left to the Map at right?
Sree
Ken
Kumar
Ye
Dan
true Sree Kumar
Ken Ye Dan
false
A. grouping()
B. groupingBy()
C. partitioning()
D. partitioningBy()
|
25. Which fills in the blank for this code to print 667788?
IntStream ints = IntStream.empty();
IntStream moreInts = IntStream.of(66, 77, 88);
Stream.of(ints, moreInts). (x -> x).forEach(System.out::print);
A. flatMap
B. flatMapToInt
C. map
D. None of the above
|
26. Fill in the blank so this code prints 8.0 Note that it must not print OptionalDouble[8.0].
LongStream stream = LongStream.of(6, 10);
LongSummaryStatistics stats = stream.summaryStatistics();
System.out.println( );
A. stats.avg()
B. stats.average()
C. stats.average().get()
D. stats.getAverage()
|
27. Which can independently fill in the blank to output No dessert today?
import java.util.*;
public class Dessert {
public static void main(String[] yum) {
eatDessert(Optional.of("Cupcake"));
}

private static void eatDessert(Optional<String> opt) {
System.out.println(opt. );
}
}
A. get("No dessert today")
B. orElse("No dessert today")
C. orElseGet(() -> "No dessert today")
D. None of the above
|
28. What does the following output?
Stream<Character> chars = Stream.generate(() -> 'a');
chars.filter(c -> c < 'b')
.sorted()
.findFirst()
.ifPresent(System.out::print);
A. a
B. The code runs successfully without any output.
C. The code enters an infinite loop.
D. The code compiles but throws an exception at runtime.
|
29. How many of the following can fill in the blank to have the code print the single digit 9?
LongStream stream = LongStream.of(9);
stream. (p -> p).forEach(System.out::print);
I. mapToDouble
II. mapToInt
III. mapToLong
A. None
B. One
C. Two
D. Three
|
30. Suppose you have a stream with one element and the code
stream.xxxx.forEach(System.out::println). Filling in xxxx from
top to bottom in the table, how many elements can be printed out?
xxxx Number elements printed
filter()
flatMap()
map()

A. Zero or one, zero or more, exactly one
B. Zero or one, exactly one, zero or more
C. Zero or one, zero or more, zero or more
D. Exactly one, zero or more, zero or more
|
31. What is the output of the following?
Stream<Character> stream = Stream.of('c', 'b', 'a');
System.out.println(stream.sorted().findFirst());
A. It is guaranteed to print the single character a.
B. It can print any single character of a, b, or c.
C. The code does not compile.
D. None of the above
|
32. What is the output of the following?
public class Compete {
public static void main(String[] args) {
Stream<Integer> is = Stream.of(8, 6, 9);
Comparator<Integer> c = (a, b) -> a - b;
is.sort(c).forEach(System.out::print);
}
}
A. 689
B. 986
C. The code does not compile
D. The code compiles but throws an exception at runtime.
|
33. What is the result of the following?
class Ballot {
private String name;
private int judgeNumber;
private int score;
public Ballot(String name, int judgeNumber, int score) {
this.name = name;
this.judgeNumber = judgeNumber;
this.score = score;
}
// all getters and setters
}

public class Speaking {
public static void main(String[] args) {
Stream<Ballot> ballots = Stream.of(
new Ballot("Mario", 1, 10),
new Ballot("Christina", 1, 8),
new Ballot("Mario", 2, 9),
new Ballot("Christina", 2, 8)
);
Map<String, Integer> scores = ballots.collect(
groupingBy(Ballot::getName, summingInt(Ballot::getScore))); // w1
System.out.println(scores.get("Mario"));
}
}
A. The code prints 2.
B. The code prints 19.
C. The code does not compile due to line w1.
D. The code does not compile due to a different line.
|
34. Which can fill in the blank so this code outputs true?
import java.util.function.*;
import java.util.stream.*;
public class HideAndSeek {
public static void main(String[] args) {
Stream<Boolean> hide = Stream.of(true, false, true);
boolean found = hide.filter(b -> b). ();
System.out.println(found);
}
}
A. Only anyMatch
B. Only allMatch
C. Both anyMatch and allMatch
D. The code does not compile with any of these options.
|
35. What does the following output?
Set<String> set = new HashSet<>();
set.add("tire-");
List<String> list = new LinkedList<>();
Deque<String> queue = new ArrayDeque<>();
queue.push("wheel-");

Stream.of(set, list, queue)
.flatMap(x -> x)
.forEach(System.out::print);
A. [tire-][wheel-]
B. tire-wheel-
C. None of the above
D. The code does not compile.
|
36. When working with a Stream<String>, which of these types can be returned from the
collect() terminal operator by passing arguments to Collectors.groupingBy()?
I. Map<Integer, List<String>>
II. Map<Boolean, HashSet<String>>
III. List<String>
A. I
B. II
C. I and II
D. I, II, and III
|
37. Which line can replace line 18 without changing the output of the program?
1: class Runner {
2: private int numberMinutes;
3: public Runner(int n) {
4: numberMinutes = n;
5: }
6: public int getNumberMinutes() {
7: return numberMinutes;
8: }
9: public boolean isFourMinuteMile() {
10: return numberMinutes < 4*60;
11: }
12: }
13: public class Marathon {
14: public static void main(String[] args) {
15: Stream<Runner> runners = Stream.of(new Runner(250),
16: new Runner(600), new Runner(201));
17: long count = runners
18: .filter(Runner::isFourMinuteMile)
19: .count();
20: System.out.println(count);
21: }
22: }

A. .map(Runner::isFourMinuteMile)
B. .mapToBool(Runner::isFourMinuteMile)
.filter(b -> b == true)
C. .mapToBoolean(Runner::isFourMinuteMile)
.filter(b -> b == true)
D. None of the above
|
38. Which method is not available on the IntSummaryStatistics class?
A. getCountAsLong()
B. getMax()
C. toString()
D. None of the above—all three methods are available.
|
39. Which can fill in the blank so this code outputs Caught it?
import java.util.*;
public class Catch {
public static void main(String[] args) {
Optional opt = Optional.empty();
try {
apply(opt);
} catch (IllegalArgumentException e) {
System.out.println("Caught it");
}
}
private static void apply(Optional<Exception> opt) {
opt. (IllegalArgumentException::new);
}
}
A. orElse
B. orElseGet
C. orElseThrow
D. None of the above. The main() method does not compile.
|
40. A developer tries to rewrite a method that uses flatMap() without using that intermediate
operator. Which pair of method calls shows the withoutFlatMap() method is not equivalent
to the withFlatMap() method?

public static void main(String[] args) {
List<String> list = new LinkedList<>();
Deque<String> queue = new ArrayDeque<>();
queue.push("all queued up");
queue.push("last");
}
private static void withFlatMap(Collection<?> coll) {
Stream.of(coll)
.flatMap(x -> x.stream())
.forEach(System.out::print);
System.out.println();
}
private static void withoutFlatMap(Collection<?> coll) {
Stream.of(coll)
.filter(x -> !x.isEmpty())
.map(x -> x)
.forEach(System.out::print);
System.out.println();
}
A. withFlatMap(list); withoutFlatMap(list);
B. withFlatMap(queue); withoutFlatMap(queue);
C. Both pairs disprove the claim.
D. Neither pair disproves this claim.

|
1. If a try, a catch, and a finally statement are used together but no exception is generated,
which blocks are executed and in which order?
A. try
B. try, catch
C. try, catch, finally
D. try, finally
|
2. Fill in the blanks: A try statement a catch or a finally block, while a
try-with-resources statement .
A. is not required to contain, is not required to contain either
B. is not required to contain, must contain one of them
C. must contain, is not required to contain either
D. must contain, must contain a catch block
|
3. What is the output of the following application?
package park;
class LostBallException extends Exception {}
public class Ball {
public void toss() throw LostBallException {
throw new ArrayStoreException();
}
public static void main(String[] bouncy) {
try {
new Ball().toss();
} catch (Throwable e) {
System.out.print("Caught!");
}
}
}
A. Caught!
B. The code does not compile because LostBallException is not handled or declared in
the main() method.
C. The code does not compile because ArrayStoreException is not handled or declared
in the toss() method.
D. The code does not compile for a different reason.
|
4. Which symbol(s) can be used to separate exception types in a multi-catch statement?
I. &
II. |
III. ||

A. II only
B. III only
C. II and III
D. I, II, and III
|
5. What is the result of executing the following application with assertions enabled?
1: package ice;
2: public class Igloo {
3: public static void main(String[] bricks) {
4: int flakes = 10;
5: double assert = 7.0;
6: assert (true :"");
7: assert flakes++>5;
8: }
9: }
A. It throws an AssertionError at runtime.
B. It prints nothing at runtime.
C. Exactly one line of code does not compile.
D. Two lines of code do not compile.
|
6. Which of the following classes is a checked exception?
A. java.lang.Error
B. java.lang.IllegalStateException
C. java.text.ParseException
D. java.lang.RuntimeException
|
7. How many constructors in WhaleSharkException compile in the following class?
package friendly;
public class WhaleSharkException extends Exception {
public WhaleSharkException() {
super("Friendly shark!");
}
public WhaleSharkException(String message) {
super(new Exception(new WhaleSharkException()));
}
public WhaleSharkException(Exception cause) {}
}
A. None
B. One
C. Two
D. Three

|
8. Given the following class diagram, which two classes are missing in the hierarchy starting
with the bottom and going upward?
Error
UnsupportedOperationException
?
?
Throwable
A. IOException, Exception
B. RuntimeException, Exception
C. IllegalArgumentException, RuntimeException
D. IllegalStateException, RuntimeException
|
9. How many lines of text does the following program print?
package lighting;
import java.io.IOException;
public class Light {
public void turnOn() throws IOException {
new IOException("Not ready");
}
public static void main(String[] b) throws Exception {
try {
new Light().turnOn();
} catch (RuntimeException b) { // y1
System.out.println(b);
throw new IOException(); // y2
} finally {
System.out.println("complete");
}
}
}
A. One
B. Two
C. The code does not compile because of line y1.
D. The code does not compile because of line y2.

|
10. Which statement, when inserted into the main() method of a program, guarantees an
AssertionError will be thrown at runtime?
A. assert(0,"Invalid");
B. assert 0==1;
C. assert 0==0;
D. None of the above
|
11. What is the output of the following application?
package paper;
import java.io.Closeable;
public class PrintCompany {
class Printer implements Closeable { // r1
public void print() {
System.out.println("This just in!");
}
public void close() {}
}
public void printHeadlines() {
try {Printer p = new Printer()} { // r2
p.print();
}
}
public static void main(String[] headlines) {
new PrintCompany().printHeadlines(); // r3
}
}
A. This just in!
B. The code does not compile because of line r1.
C. The code does not compile because of line r2.
D. The code does not compile because of line r3.
|
12. Which statement about try-with-resources is not true?
A. If the try block and close() method both throw an exception, the one thrown by the
close() method is suppressed.
B. A catch block is not required.
C. If more than one resource is used, the resources are closed in the order they were
created.
D. Parentheses are used for the resource declaration section, even if more than one
resource is used.

|
13. How many lines of text does the following program print?
package bee;
class SpellingException extends RuntimeException {}
public class SpellChecker {
public final static void main(String... participants) {
try {
if(!"cat".equals("kat")) {
new SpellingException();
}
} catch (SpellingException | NullPointerException e) {
System.out.println("Spelling problem!");
} catch (Exception e) {
System.out.println("Unknown Problem!");
} finally {
System.out.println("Done!");
}
}
}
A. One
B. Two
C. Three
D. The code does not compile.
|
14. Which exception classes, when inserted into the blank in the Problems class, allow the
code to compile?
package more;
class MissingMoneyException extends Exception {}
class MissingFoodException extends Exception {}
public class Problems {
public void doIHaveAProblem() throws MissingMoneyException,
MissingFoodException {
System.out.println("No problems");
}
public static void main(String[] lots) throws {
try {
final Problems p = new Problems();
p.doIHaveAProblem();
} catch (Exception e) {

throw e;
}
}
}
I. Exception
II. MissingMoneyException
III. MissingMoneyException, MissingFoodException
A. I only
B. III only
C. I and III
D. I, II, and II
|
15. Which statement about Closeable and AutoCloseable is true?
A. AutoCloseable extends Closeable.
B. The close() method in a class that implements AutoCloseable cannot throw an
IOException.
C. The close() method in a class that implements Closeable cannot throw an
Exception.
D. There is no difference; one was added for backward compatibility.
|
16. Which expression, when inserted into the blank in the following class, allows the code to
compile?
package sun;
import java.io.*;
public class Beach {
class TideException extends Exception {}
public void surf() throws RuntimeException {
try {
throw new TideException();
} catch ( ) {}
}
}
A. Exception a | RuntimeException f
B. IllegalStateException | TideException t
C. TideException | IOException i
D. TideException | Exception x

|
17. Which statement about a multi-catch statement is true?
A. The exception types must be ordered from broadest to narrowest.
B. The exception types must be ordered from narrowest to broadest.
C. The variable of a multi-catch block with more than one exception cannot be reassigned
within the block.
D. The variable of a multi-catch block with one exception type cannot be reassigned within
the block.
|
18. Given the following class, how many lines contain compilation errors?
package move;
interface Closing {
void close() throws Exception;
}
class Shelf implements Closing {
public void close() throws Exception {}
}
public class Step {
static {
try (Shelf shelf = new Shelf()) {
throws new IllegalArgumentException();
} catch (Exception e) {
} catch (IllegalArgumentException e) {
} finally {
shelf.close();
}
}
}
A. None
B. Two
C. Three
D. Four
|
19. Which of the following is not true of using a try-with-resources statement?
A. Associated catch blocks are run before the declared resources have been closed.
B. It is compatible with all classes that implement the AutoCloseable interface.
C. It is compatible with all classes that implement the Closeable interface.
D. It shortens the amount of code a developer must write.

|
20. Assuming the following application is executed with assertions enabled, what is the result?
package input;
public class DataIntegrity {
private int score;
public DataIntegrity() {
super();
DataIntegrity.this.score = 5;
}
public static void main(String[] books) {
final DataIntegrity johnny5 = new DataIntegrity();
assert(johnny5.score>2) : johnny5.score++;
assert johnny5.score>=5 : System.out.print("No input");
System.out.print("Made it!");
}
}
A. An AssertionError is thrown with a message of 5.
B. An AssertionError is thrown with a message of No input.
C. Made it! is printed.
D. The code does not compile.
|
21. Which of the following classes is an unchecked exception?
A. java.io.IOException
B. java.io.NotSerializableException
C. java.sql.SQLException
D. java.util.MissingResourceException
|
22. What is the result of compiling and executing the following class?
package wind;
public class Storm {
public static void main(String... rain) throws Exception {
try (final AutoCloseable weatherTracker = new AutoCloseable() {
public void close() throws RuntimeException {}
}) {
System.out.println(weatherTracker.toString());
} catch (Exception e) {
if(weatherTracker != null) {
weatherTracker.close();
}

} finally {
System.out.println("Storm gone");
}
}
}
A. It prints one line.
B. It prints two lines.
C. It does not compile due to an error in the declaration of the weatherTracker resource.
D. It does not compile for a different reason.
|
23. Which of the following is not a command that enables or disables assertions at runtime?
A. -di
B. -disableassertions
C. -ea
D. -enableassertions
|
24. What is the output of the following application?
package signlanguage;
import java.io.Closeable;
class ReadSign implements Closeable {
public void close() {}
public String get() {return "Hello";}
}
class MakeSign implements AutoCloseable {
public void close() {}
public void send(String message) {
System.out.print(message);
}
}
public class Translate {
public static void main(String... hands) {
try (ReadSign r = new ReadSign();
MakeSign w = new MakeSign();) {
w.send(r.get());
}
}
}
A. Hello
B. The code does not compile because of the ReadSign class.
C. The code does not compile because of the try-with-resources statement.
D. None of the above

|
25. What is the output of the following application?
package what;
class FunEvent implements AutoCloseable {
public void close() {
System.out.print("1");
}
}
public class Happening {
public static void main(String... lots) {
try (FunEvent f = new FunEvent()) {
System.out.print("2");
throw new ArithmeticException();
} catch (Exception e) {
System.out.print("3");
} finally {
System.out.print("4");
}
}
}
A. 214
B. 2134
C. 2314
D. The code does not compile.
|
26. Which statement best describes how a class that implements the AutoCloseable interface
should be written?
A. The close() method is optional since the AutoCloseable interface defines a default
implementation.
B. The close() method should avoid modifying data after it has been run once.
C. The close() method should not throw any exceptions.
D. The close() method should return a status code.
|
27. Which statement about the following program is correct?
package dogpark;
public class Fetch {
public int play(String dogName) throws Exception {
try {
throw new RuntimeException(dogName);
} catch (Exception e) {
throw new RuntimeException(e);
}

}
public static final void main(String[] ball) throws RuntimeException {
new Fetch().play("Webby");
new Fetch().play("Georgette");
}
}
A. The program prints one exception at runtime.
B. The program prints two exceptions at runtime.
C. The class does not compile because of the play() method.
D. The class does not compile because of the main() method.
|
28. Which of the following is not a good use of assertions?
A. Check method post conditions.
B. Modify local variables.
C. Test control flow invariants.
D. Validate class invariants.
|
29. Which statement about the following application is correct?
package highway;
import java.io.*;
class CarCrash extends RuntimeException {}
public class Car {
public static void main(String[] seatbelts) throws Exception { // w1
try {
throw new IOException("Auto-pilot error");
} catch (Exception | CarCrash e) { // w2
throw e;
} catch (Exception a) { // w3
throw a;
}
}
}
A. The code does not compile because of line w1.
B. The code does not compile because of line w2.
C. The code does not compile because of line w3.
D. The code compiles and runs without issue.

|
30. Which statements about the following classes are true?
public class Dopey extends Grumpy {}
public class Grumpy extends Exception {}
public class Happy extends IOException {}
public class Sleepy extends IllegalStateException {}
public class Sneezy extends Throwable {}
I. Four of the classes are checked exceptions.
II. Two of the classes are unchecked exceptions.
III. None of the class declarations contain any compilation errors.
A. I only
B. I and III
C. II and III
D. I, II, and III
|
31. What is the output of the following application?
package vortex;
class TimeException extends Exception {}
class TimeMachine implements AutoCloseable {
int v;
public TimeMachine(int v) {this.v = v;}
public void close() throws Exception {
System.out.print(v);
}
}
public class TimeTraveler {
public static void main(String[] twelve) {
try (TimeMachine timeSled = new TimeMachine(1);
TimeMachine delorean = new TimeMachine(2);
TimeMachine tardis = new TimeMachine(3)) {
} catch (TimeException e) {
System.out.print(4);
} finally {
System.out.print(5);
}
}
}
A. 1235
B. 3215
C. 41235
D. The code does not compile.

|
32. Which expression, when inserted into the blank in the following class, allows the code to
compile?
package music;
public class Bells {
class Player implements AutoCloseable {
@Override public void close() throws RingException {}
}
class RingException extends Exception {
public RingException(String message) {}
}
public static void main(String[] notes) throws Throwable {
try (Player p = null) {
throw new Exception();
} catch (Exception e) {
} catch ( ) {
}
}
}
A. Error r
B. IllegalStateException b
C. RingException p
D. The code does not compile regardless of the expression used.
|
33. Given the following two variables, which assertion statement compiles successfully?
int age = 22;
final String name = "Josephine";
A. assert (age=2);
B. assert age!=age : (1<age ? "Error" : 10);
C. assert name.equals("") : () -> "Oops";
D. assert name.length()<(long)age : return "Mistake";
|
34. Which statement about the following program is true?
package tag;
class MissedCallException extends Exception {}
public class Phone {
static void makeCall() throws RuntimeException {
throw new ArrayIndexOutOfBoundsException("Call");
}
public static void main(String[] messages) {

try {
makeCall();
} catch (MissedCallException e) {
throw new RuntimeException("Voicemail");
} finally {
throw new RuntimeException("Text");
}
}
}
A. An exception is printed at runtime with Call in the message.
B. An exception is printed at runtime with Voicemail in the message.
C. An exception is printed at runtime with Text in the message.
D. The code does not compile.
|
35. Which statement about the following program is correct?
package fairy;
public class Tale {
class BearException extends RuntimeException {}
class WolfException extends RuntimeException {}
class DragonException extends RuntimeException {}
public int tellStory() {
try {} catch (BearException d) {
d = new RuntimeException();
throw d;
} catch (WolfException | DragonException e) {
e = new RuntimeException();
throw e;
}
return 3;
}
public static void main(String... wand) throws RuntimeException{
new Tale().tellStory();
}
}
A. The class compiles and does not print anything at runtime.
B. The code does not compile solely due to the first catch block in tellStory().
C. The code does not compile solely due to the second catch block in tellStory().
D. The code does not compile due to errors in both catch blocks in tellStory().

|
36. What is the output of the following application?
package classical;
import java.io.*;
class OutOfTuneException extends Exception {
OutOfTuneException(String message) { super(message); }
}
public class Piano {
public void play() throws OutOfTuneException, FileNotFoundException {
throw new OutOfTuneException("Sour note!");
}
public static void main(String... keys) throws OutOfTuneException {
final Piano piano = new Piano();
try {
piano.play();
} catch (Exception e) {
throw e;
} finally {
System.out.println("Song finished!");
}
}
}
A. Song finished!
B. An exception is printed with Sour note! in the stack trace.
C. Both of the above
D. None of the above
|
37. Given the following class, which command causes the class to throw an AssertionError at
runtime?
public class Falcon extends Exception {
private int parsec = 12;
public Falcon(String name) {
super(name);
}
public static void main(String[] aluminum) {
assert new Falcon(null).parsec<12;
}
}
A. java Falcon
B. java -ea -da:Falcon Falcon
C. java -da -ea:Falcon Falcon
D. The code does not compile.

|
38. What is the output of the following application?
package db;
import java.io.*;
import java.sql.*;
public class DatabaseHelper {
static class MyDatabase implements Closeable {
public void close() throws SQLException {
System.out.print("2");
}
public void write(String data) {}
public String read() {return null;}
}
public static void main(String... files) throws Exception {
try (MyDatabase myDb = new MyDatabase()) {
// TODO: Decide what to read/rite
} finally {
System.out.print("1");
}
}
}
A. 12
B. 21
C. The code does not compile because of the MyDatabase class.
D. The code does not compile because of the try-with-resources statement.
|
39. How many lines of text does the following program print?
package tron;
class DiskPlayer implements AutoCloseable {
public void close() throws Exception {}
}
public class LightCycle {
public static void main(String... bits) {
try (DiskPlayer john = new DiskPlayer()) {
System.out.println("ping");
} finally {
System.out.println("pong");
}

System.out.println("return");
}
}
A. One
B. Two
C. Three
D. The code does not compile.
|
40. Given the application below, what is the name of the class printed at line e1?
package canyon;
final class FallenException extends Exception {}
final class HikingGear implements AutoCloseable {
@Override public void close() throws Exception {
throw new FallenException();
}
}
public class Cliff {
public final void climb() throws Exception {
try (HikingGear gear = new HikingGear()) {
throw new RuntimeException();
}
}
public static void main(String... rocks) {
try {
new Cliff().climb();
} catch (Throwable t) {
System.out.println(t); // e1
}
}
}
A. canyon.FallenException
B. java.lang.RuntimeException
C. The code does not compile.
D. The code compiles, but the answer cannot be determined until runtime.

|
1. What package is the LocalTime class in?
A. java.date
B. java.lang
C. java.time
D. java.util
|
2. How many of the classes Duration, LocalDateTime, and LocalTime have the concept of a
time zone?
A. None
B. One
C. Two
D. Three
|
3. Which class has a getSeconds() method?
A. Only the Duration class
B. Only the Period class
C. Both the Duration and Period classes
D. Neither class
|
4. Which of these represents the earliest date/time?
A. 2017-02-15T03:00+01:00[Europe/Berlin]
B. 2017-02-15T04:00+02:00[Europe/Helsinki]
C. 2017-02-15T05:00+01:00[Europe/Warsaw]
D. None of the above. We have a tie.
|
5. Most of the United States observes daylight savings time on March 12, 2017, by moving the
clocks forward an hour at 2 a.m. What does the following code output?
LocalDate localDate = LocalDate.of(2017, 3, 12);
LocalTime localTime = LocalTime.of(1, 0);
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime z = ZonedDateTime.of(localDate, localTime, zone);
Duration duration = Duration.ofHours(3);
ZonedDateTime later = z.plus(duration);
System.out.println(later.getHour());
A. 4
B. 5
C. 6
D. None of the above

|
6. What does the following output?
int year = 1874;
int month = Month.MARCH;
int day = 24;
LocalDate date = LocalDate.of(year, month, day);
System.out.println(date.isBefore(LocalDate.now()));
A. false
B. true
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
7. Which correctly fills in the blank to print 2017-01-15?
LocalDate hatDay = LocalDate.of(2017, Month.JANUARY, 15);
DateTimeFormatter f = DateTimeFormatter.ISO_DATE;
System.out.println( );
I. f.format(hatDay)
II. f.formatDate(hatDay)
III. hatDay.format(f)
A. I
B. III
C. I and III
D. II and III
|
8. Which of the answer choices is true given the following?
2017-01-07T10:00-07:00[America/Phoenix]
2017-01-07T08:00-08:00[America/Vancouver]
A. The first date/time is one hour earlier than the second.
B. The first date/time is three hours earlier than the second.
C. The first date/time is one hour later than the second.
D. The first date/time is three hours later than the second.
|
9. Given that daylight savings time starts on March 12, 2017, at 2 a.m. and clocks jump from
1:59 a.m. to 03:00 a.m., which of the following can fill in the blank so the code doesn’t
throw an exception?
LocalDate localDate = LocalDate.of(2017, 3, 12);
LocalTime localTime = LocalTime.of( );
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime z = ZonedDateTime.of(localDate, localTime, zone);

A. 2, 0
B. 3, 0
C. Either of the above will run without throwing an exception.
D. Both of these will cause an exception to be thrown.
|
10. What is the result of the following?
11: LocalDate waffleDay = LocalDate.of(2017, Month.MARCH, 25);
12: Period period = Period.of(1, 6, 3);
13: LocalDate later = waffleDay.plus(period);
14: later.plusDays(1);
15: LocalDate thisOne = LocalDate.of(2018, Month.SEPTEMBER, 28);
16: LocalDate thatOne = LocalDate.of(2018, Month.SEPTEMBER, 29);
17: System.out.println(later.isBefore(thisOne) + " "
18: + later.isBefore(thatOne));
A. false false
B. false true
C. true true
D. The code does not compile.
|
11. What is a possible result of the following?
LocalDate montyPythonDay = LocalDate.of(2017, Month.MAY, 10);
LocalDate aprilFools = LocalDate.of(2018, Month.APRIL, 1);
Duration duration = Duration.ofDays(1);
LocalDate result = montyPythonDay.minus(duration);
System.out.println(result + " " + aprilFools.isBefore(result));
A. 2017-05-09 false
B. 2017-05-09 true
C. The code does not compile.
D. None of the above
|
12. What is the result of running this code?
12: LocalDate pieDay = LocalDate.of(2017, Month.JANUARY, 23);
13: LocalTime midnight = LocalTime.of(0, 0);
14: LocalDateTime pieTime = LocalDateTime.of(pieDay, midnight);
15:
16: DateTimeFormatter f = DateTimeFormatter
17: .ofLocalizedDate(FormatStyle.SHORT);
18: f.format(pieDay);
19: f.format(pieTime);
20: f.format(midnight);

A. The code runs successfully.
B. The code throws an exception on line 19.
C. The code throws an exception on line 20.
D. The code does not compile.
|
13. In the United States, daylight savings time ends on November 5th, 2017 at 02:00 a.m. and
we repeat the previous hour. What is the output of the following?
import java.time.*;
public class FallBack {
public static void main(String[] args) {
LocalDate localDate = LocalDate.of(2017, Month.NOVEMBER, 5);
LocalTime localTime = LocalTime.of(1, 0);
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime z = ZonedDateTime.of(localDate, localTime, zone);
for (int i = 0; i < 6; i++)
z.plusHours(1);
System.out.println(z.getHour());
}
}
A. 5
B. 6
C. 7
D. None of the above
|
14. What format pattern would you pass to a DateTimeFormatter so it creates hour and minute
output such as 02:33?
A. HH:MM
B. HH:mm
C. hh:MM
D. hh:mm
|
15. LocalTime.of() has a number of overloads. Which of the following is not one of them?
A. LocalTime.of(int hour, int minute)
B. LocalTime.of(int hour, int minute, int second)
C. LocalTime.of(int hour, int minute, int second, int nanoOfSecond)
D. LocalTime.of(int hour, int minute, int second, int nanoOfSecond,
int picoSeconds)

|
16. How many of the classes LocalDate, Period, and ZonedDate have a method to get
the year?
A. None
B. One
C. Two
D. Three
|
17. Which statement is not true about these two variables?
Duration duration = Duration.ofDays(1);
Period period = Period.ofDays(1);
A. Both output the same value when calling toString().
B. The Duration object compiles because durations are for smaller units of time.
C. The Period object compiles because periods are for larger units of time.
D. None of the above
|
18. What is a possible output of this code?
LocalTime time = LocalTime.of(1,2,3,4);
System.out.println(time);
A. 01:02:03.4
B. 01:02:03.000000004
C. 01/01/1970 01:02:03.4
D. 01/01/1970 01:02:03.000000004
|
19. What does the following print?
import java.time.*;
import java.time.format.*;
public class PolarBear {
public static void main(String[] args) {
LocalDate polarBearDay = LocalDate.of(2017, 2, 27);
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy dd MMM");
System.out.println(polarBearDay.format(formatter));
}
}
A. 2017 27 Jan
B. 2017 27 Feb
C. 2017 Jan 27
D. 2017 Feb 27

|
20. Which contains a constant named HOURS?
A. ChronoUnit
B. Duration
C. Instant
D. Period
|
21. The United States observes daylight savings time on March 12, 2017, by moving the clocks
forward an hour at 2 a.m. What does the following code output?
LocalDate localDate = LocalDate.of(2017, 3, 12);
LocalTime localTime = LocalTime.of(13, 0);
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime z = ZonedDateTime.of(localDate, localTime, zone);
Duration duration = Duration.ofHours(3);
ZonedDateTime later = z.plus(duration);
System.out.println(later.getHour());
A. 13
B. 16
C. 17
D. None of the above
|
22. What is a possible result of the following?
LocalDate montyPythonDay = LocalDate.of(2017, Month.MAY, 10);
LocalTime time = LocalTime.of(5, 40);
LocalDateTime dateTime = LocalDateTime.of(montyPythonDay, time);
Duration duration = Duration.ofDays(1);
LocalDateTime result = dateTime.minus(duration);
System.out.println(result);
A. 2017-05-09
B. 2017-05-09T05:40
C. 2017-05-10T05:40
D. None of the above
|
23. Which correctly fills in the blank to print 2017-01-15?
LocalDate hatDay = LocalDate.of(2017, Month.JANUARY, 15);
DateFormatter f = DateFormatter.ISO_DATE;
System.out.println( );
A. f.format(hatDate)
B. hatDay.format(f)
C. Both of the above
D. Neither of the above

|
24. LocalDateTime.of() has a number of overloads. Which of the following is not one
of them?
A. LocalDateTime.of(LocalDate date, LocalTime time)
B. LocalDateTime.of(LocalDate date, int hour, int minute)
C. LocalDateTime.of(int year, int month, int day, int hour, int minute)
D. LocalDateTime.of(int year, Month month, int day, int hour, int minute)
|
25. In the United States, daylight savings time for 2017 starts at 2 a.m. on March 12th and
ends at 2 a.m. on November 5th. Given the sequence in the following image, what time
comes next on March 12th, July 4th, and November 5th, respectively?
1:58 1:59 ?
A. 01:00, 02:00, 01:00
B. 01:00, 02:00, 03:00
C. 03:00, 02:00, 01:00
D. 03:00, 02:00, 03:00
|
26. What is the output of the following?
LocalDate date1 = LocalDate.of(2017, Month.MARCH, 3);
LocalDate date2 = LocalDate.of(2017, Month.FEBRUARY, 31);
System.out.println(date1.equals(date2));
A. false
B. true
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
27. Given this date/time and time zone offset, what time is it in GMT?
2017-03-09T16:00-10:00[US/Hawaii]
A. 02:00
B. 04:00
C. 06:00
D. 10:00
|
28. What is a possible output of the following?
LocalDate trainDay = LocalDate.of(2017, 5, 13);
LocalTime time = LocalTime.of(10, 0);
ZoneId zone = ZoneId.of("America/Los_Angeles");

ZonedDateTime zdt = ZonedDateTime.of(trainDay, time, zone);
Instant instant = zdt.toInstant();
instant = instant.plus(1, ChronoUnit.DAYS);
System.out.println(instant);
A. 2017-05-13T10:00-07:00[America/Los_Angeles]
B. 2017-05-13T17:00:00Z
C. 2017-05-14T10:00-07:00[America/Los_Angeles]
D. 2017-05-14T17:00:00Z
|
29. What is the output of the following?
LocalDate date = LocalDate.of(2017, Month.JULY, 17);
LocalTime time = LocalTime.of(10, 0);
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime iceCreamDay = ZonedDateTime.of(date, time, zone);
time = time.plusMonths(1);
System.out.println(iceCreamDay.getMonthValue());
A. 6
B. 7
C. 8
D. The code does not compile.
|
30. What does the following print?
import java.time.*;
import java.time.format.*;
public class PolarBear {
public static void main(String[] args) {
LocalDate polarBearDay = LocalDate.of(2017, 2, 27);
DateTimeFormatter formatter = DateTimeFormatter
.ofPattern("Holiday: yyyy dd MMM");
System.out.println(polarBearDay.format(formatter));
}
}
A. Holiday: 2017 27 Jan
B. Holiday: 2017 27 Feb
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
31. Which of these represents the earliest date/time?
A. 2017-02-15T16:00+07:00[Asia/Bangkok]
B. 2017-02-15T18:00+04:00[Asia/Dubai]
C. 2017-02-15T20:00+08:00[Asia/Kuala_Lumpur]
D. None of the above. We have a tie.
|
32. What is the result of the following?
11: LocalDate waffleDay = LocalDate.of(2017, Month.MARCH, 25);
12: Period period = Period.ofYears(1).ofMonths(6).ofDays(3);
13: LocalDate later = waffleDay.plus(period);
14: later.plusDays(1);
15: LocalDate thisOne = LocalDate.of(2018, Month.SEPTEMBER, 28);
16: LocalDate thatOne = LocalDate.of(2018, Month.SEPTEMBER, 29);
17: System.out.println(later.isBefore(thisOne) + " "
18: + later.isBefore(thatOne));
A. false false
B. false true
C. true true
D. The code does not compile.
|
33. How many of the following can fill in the blank so this code compiles and prints 31?
LocalDate xmas = LocalDate.of(2017, 12, 25);
LocalDate blackFriday = LocalDate.of(2017, 11, 24);
long shoppingDaysLeft = ;
System.out.println(shoppingDaysLeft);
I. blackFriday.until(xmas, ChronoUnit.DAYS)
II. blackFriday.until(xmas, TemporalUnit.DAYS)
III. ChronoUnit.DAYS.between(blackFriday, xmas)
IV. TemporalUnit.DAYS.between(blackFriday, xmas)
A. One
B. Two
C. Three
D. Four
|
34. How many of these classes cause a compiler error when filling in the blank: LocalDate,
LocalDateTime, LocalTime, ZonedDateTime?
private static String formatMe( obj) {
DateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);
return f.format(obj);
}

A. None
B. One
C. Two
D. Three
|
35. What is the output of the following?
LocalDate date = LocalDate.of(2017, Month.JULY, 17);
LocalTime time = LocalTime.of(10, 0);
ZoneId zone = ZoneId.of("America/New_York");
ZonedDateTime iceCreamDay = ZonedDateTime.of(date, time, zone);
date = date.plusMonths(1);
System.out.println(iceCreamDay.getMonthValue());
A. 6
B. 7
C. 8
D. The code does not compile.
|
36. Which of the following can fill in the blank to make this code compile?
public boolean isItMyBirthday(LocalDateTime dateTime) {
return now.getMonth() == dateTime.getMonth()
&& now.getDayOfMonth() == dateTime.getDayOfMonth();
}
A. LocalDate now = LocalDate.now();
B. LocalDate now = new LocalDate();
C. ZonedDate now = ZonedDate.now();
D. ZonedDate now = new ZonedDate();
|
37. What is the output of the following?
LocalDate date1 = LocalDate.of(2017, Month.MARCH, 3);
LocalDate date2 = date1.plusDays(2).minusDays(1).minusDays(1);
System.out.println(date1.equals(date2));
A. false
B. true
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
38. What is a possible output of the following?
LocalDate date = LocalDate.of(2017, 5, 13);
LocalTime time = LocalTime.of(10, 0);
LocalDateTime trainDay = LocalDateTime.of(date, time);
Instant instant = trainDay.toInstant();
instant = instant.plus(1, ChronoUnit.DAYS);
System.out.println(instant);
A. 2017-05-14T10:00-07:00[America/Los_Angeles]
B. 2017-05-14T17:00:00Z
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
39. What is the result of the following?
public class PiDay {
public static void main(String[] args) {
LocalDateTime pi = LocalDateTime.of(2017, 3, 14, 1, 59);
DateTimeFormatter formatter = DateTimeFormatter
.ofPattern("M.ddhhmm");
System.out.println(formatter.format(pi));
}
}
A. 3.140159
B. 59.140103
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
40. Daylight savings time ends on November 5, 2017 at 2 a.m. when we repeat the hour.
Suppose
we have a ZonedDateTime that outputs 2017-11-05T01:00-04:00[America/
New_York] when calling toString(). What is a possible value of the ZonedDateTime
obtained by adding an hour to this value?
A. 2017-11-05T01:00-04:00[America/New_York]
B. 2017-11-05T02:00-04:00[America/New_York]
C. 2017-11-05T01:00-05:00[America/New_York]
D. 2017-11-05T02:00-05:00[America/New_York]

|
1. Fill in the blanks: Writer is that related stream classes .
A. a concrete class, extend
B. an abstract class, extend
C. an interface, extend
D. an interface, implement
|
2. Which of the following methods is defined in java.io.File?
A. createDirectory()
B. getLength()
C. listFile()
D. renameTo()
|
3. Which method in InputStream can be used in place of calling skip(1)?
A. jump()
B. mark()
C. read()
D. reset()
|
4. Which methods are classes that implement java.io.Serializable required to implement?
A. deserialize()
B. serial()
C. serialize()
D. None of the above
|
5. Fill in the blanks: Given a valid Console instance, reader() returns a ,
while writer() returns a .
A. PrintReader, PrintWriter
B. PrintReader, Writer
C. Reader, Writer
D. StringReader, Writer
|
6. Assuming the file path referenced in the following class is accessible and able to be written,
what is the output of the following program?
package alarm;
import java.io.*;
public class Smoke {
public void sendAlert(File fn) {
try(BufferedWriter w = new BufferedWriter(new FileOutputStream(fn))) {
w.write("ALERT!");
w.flush();
w.write('!');

System.out.print("1");
} catch (IOException e) {
System.out.print("2");
} finally {
System.out.print("3");
}
}
public static void main(String[] testSignal) {
new Smoke().sendAlert(new File("alarm.txt"));
}
}
A. 3
B. 13
C. 23
D. The code does not compile.
|
7. Which class is used to read information about a directory within the file system?
A. java.io.File
B. java.io.Directories
C. java.io.Directory
D. java.io.Path
|
8. Which of the following is a high-level stream class that can only be used to wrap a
low-level stream?
A. FileOutputStream
B. FileReader
C. ObjectInputStream
D. PrintWriter
|
9. Assume the file prime6.txt exists and contains the first six prime numbers as bytes: 2, 3,
5, 7, 11, |
13. What is the output of the following application?
package numbers;
import java.io.*;
public class PrimeReader {
public static void main(String[] real) throws Exception {
try (InputStream is = new FileInputStream("prime6.txt")) {
is.skip(1);
is.read();
is.skip(1);
is.read();

is.mark(4);
is.skip(1);
is.reset();
System.out.print(is.read());
}
}
}
A. 11
B. 13
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
10. Fill in the blanks: For a given file, the absolute is the path from the to the
file, while the relative path is the path from the to the file.
A. current directory, current working directory
B. parent directory, temporary directory
C. root directory, current working directory
D. root directory, parent directory
|
11. Which statement best describes the following two methods?
public void writeSecret1() throws IOException {
final Writer w = new BufferedWriter(
new FileWriter("dont.open"));
w.write("Secret passcode");
w.close();
}
public void writeSecret2() throws IOException {
try(final Writer w = new BufferedWriter(
new FileWriter("dont.open"))) {
w.write("Secret passcode");
}
}
A. Both methods compile and are equivalent to each other.
B. Neither method compiles.
C. Only one of the methods compiles.
D. The methods compile, but one method may lead to a resource leak.

|
12. What is the result of compiling and executing the following program?
package vacation;
import java.io.*;
import java.util.*;
public class Itinerary {
private List<String> activities = new ArrayList<>();
private static Itinerary getItinerary(String name) {
return null;
}
public static void printItinerary() throws Exception {
Console c = new Console();
final String name = c.readLine("What is your name?");
final Itinerary stuff = getItinerary(name);
stuff.activities.forEach(s -> c.printf(s));
}
public static void main(String[] holidays) throws Exception {
printItinerary();
}
}
A. The code does not compile.
B. The code compiles and prints a NullPointerException at runtime.
C. The code compiles but does not print anything at runtime.
D. None of the above
|
13. Given the following diagram, which two classes can be placed in the blank boxes?
OutputStream
FilterOutputStream
A. BufferedOutputStream and PrintStream
B. BufferedOutputStream and PrintOutputStream
C. ByteArrayOutputStream and Stream
D. FileOutputStream and OutputStream

|
14. Let’s say we want to write an instance of Cereal to disk, having a name value of
CornLoops.
What is the value of name after this object has been read using the
ObjectInputStream’s
readObject() method?
package breakfast;
public class Cereal {
private String name = "CocoaCookies";
private transient int sugar;
public Cereal() {
super();
this.name = "CaptainPebbles";
}
{
name = "SugarPops";
}
public String getName() { return name; }
public void setName(String name) {
this.name = name;
}
public int getSugar() { return sugar; }
public void setSugar(int sugar) {
this.sugar = sugar;
}
}
A. CaptainPebbles
B. CornLoops
C. SugarPops
D. None of the above
|
15. Which statement best describes the difference between a Writer and an OutputStream class?
A. Only one of them can write text or character data.
B. Only one of them has built-in methods for writing character data.
C. Only one of them has a flush() method to force the data to be written out.
D. One uses a byte array to process character data more efficiently.
|
16. What is the output of the following application? It is safe to assume the directories referenced
in the class do not exist prior to the execution of the program and that the file system
is available and able to be written.
package job;
import java.io.*;
public class Resume {

public void resetWorkingDirectory() throws Exception {
File f1 = new File("/templates/proofs");
f1.mkdirs();
File f2 = new File("/templates");
f2.mkdir(); // k1
new File(f2,"draft.doc").createNewFile();
f1.delete();
f2.delete(); // k2
}
public static void main(String... leads) {
try {
new Resume().resetWorkingDirectory();
} catch (Exception e) {
new RuntimeException(e);
}
}
}
A. Line k1 does not compile or triggers an exception at runtime.
B. Line k2 does not compile or triggers an exception at runtime.
C. The code compiles and runs without printing an exception.
D. None of the above
|
17. Given the following class, three of the values ensure it runs properly on various different
systems. Which value does not?
package magic;
import java.io.*;
public class Store {
private final String directory;
public Store(String directory) {
this.directory = directory;
}
public File getDatabaseFolder(String file) {
return new File(directory + + file);
}
}
A. java.io.File.separator
B. new File(new String()).separatorChar
C. System.getProperty("file.separator")
D. System.getProperty("path.separator")

|
18. How many compilation errors does the following class contain?
package hero;
import java.io.*;
public class Guitar {
public void readMusic(File f) {
try (BufferedReader r = new BufferedReader(FileReader(f))) {
final String music = null;
try {
while((music = r.readLine()) != null)
System.out.println(music);
} catch (IOException e) {}
} catch (FileNotFoundException e) {
throw new RuntimeException(e);
} finally {}
}}
A. None
B. One
C. Two
D. Three
|
19. What is the difference between the two Console methods, format() and printf()?
A. One of them takes an optional list of arguments; the other does not.
B. One of them takes String as input; the other takes an Object.
C. There is no difference between the two methods.
D. Trick question! printf() is not defined in Console.
|
20. Let’s say you want to write a lot of text data to a file in an efficient manner. Which two
java.io stream classes are best to use?
A. FileOutputStream and BufferedOutputStream
B. FileOutputWriter and FileBufferedWriter
C. FileWriter and BufferedWriter
D. ObjectOutputStream and BufferedWriter
|
21. Assume the file referenced in the StudentManager class exists and contains data. Which
statement about the following class is correct?
package school;
import java.io.*;
class Student implements Serializable {}
public class StudentManager {

public static void main(String[] grades) {
try(ObjectInputStream ios = new ObjectInputStream(
new FileInputStream(new File("C://students.data")))) {
Student record;
while((record = (Student)ios.readObject()) != null) {
System.out.print(record);
}
} catch (EOFException e) {
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}
A. The code does not compile.
B. The code compiles but prints an exception at runtime.
C. The program runs and prints all students in the file.
D. The program runs but may only print some students in the files.
|
22. Which java.io class does not have a complementary input stream?
A. BufferedOutputStream
B. BufferedWriter
C. FileWriter
D. PrintWriter
|
23. Assuming the path /Earth does not exist within the file system, what is the output of the
following program?
package center;
import java.io.*;
public class Journey {
public static void main(String[] dig) {
File file = new File("/Earth");
System.out.print(file.getParent()
+" - "
+file.getParent().getParent()); } }
A. / - /
B. / - null
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
24. Which statements about executing the following program are true?
package test;
import java.io.*;
public class Turing {
public static void main(String... robots) {
Console c = System.console();
final String response = c.readLine("Are you human?");
System.err.print(response);
}
}
I. The program may ask the user a question and print the response to the error stream.
II. The program may throw a NullPointerException at runtime.
III. The program may wait indefinitely.
A. I
B. I and III
C. II and III
D. I, II, and III
|
25. Which of the following statements about the deleteTree() method is correct?
public void deleteTree(File f) {
if(!f.isDirectory())
f.delete();
else {
Stream.of(f.list())
.forEach(s -> deleteTree(s));
f.deleteDirectory();
}
}
A. It compiles and is capable of deleting a directory tree.
B. If one line were modified, it would be capable of deleting a directory tree.
C. If two lines were modified, it would be capable of deleting a directory tree.
D. None of the above
|
26. Which of the following is not a built-in stream in Java?
A. System.err
B. System.in

C. System.info
D. System.out
|
27. Assuming the file path referenced in the following class is accessible and able to be written,
what is the output of the following program?
package store;
import java.io.*;
public class Furniture {
public final static void main(String... inventory) throws Exception {
Writer w = new FileWriter("couch.txt");
try (BufferedWriter bw = new BufferedWriter(w)) {
bw.write("Blue coach on Sale!");
} finally {
w.flush();
w.close();
}
System.out.print("Done!");
}
}
A. Done!
B. The code does not compile for one reason.
C. The code does not compile for two reasons.
D. The code compiles but throws an exception at runtime.
|
28. Given an instance of Console c, which of the following method calls is not a way to read
input from the user?
A. c.reader().read()
B. c.reader().readLine()
C. c.readLine()
D. c.readPassword()
|
29. The copyPidgin() method is used to copy the contents of one file to another. Which
statement about the implementation is correct?
package birds;
import java.io.*;
public class Pidgin {
public void copyPidgin(File s, File t) throws Exception {
try(InputStream is = new FileInputStream(s);
OutputStream os = new FileOutputStream(t)) {
byte[] data = new byte[123];

int chirps;
while((chirps = is.read(data))>0) {
os.write(data);
}}
}}
A. The class does not compile because read(byte[]) and write(byte[]) can only be
called on BufferedInputStream and BufferOutputStream, respectively.
B. The method correctly copies the contents of all files.
C. The method correctly copies the contents of some files.
D. The method will always throw an exception at runtime because the data array size is
not a power of 2.
|
30. Using what you know about java.io stream class names, what would a nonexistent class
named BufferedFileReader most likely be used for?
A. Reading a small text file from a remote network
B. Reading an image from disk
C. Reading large text files from a file system
D. Reading serialized data from disk
|
31. What is the output of the following application?
package factory;
import java.io.*;
public class WidgetProcessor {
public int getWidgetNumber(byte[] data) throws Exception {
try (InputStream is = new ByteArrayInputStream(data)) {
is.read(new byte[2]);
if(!is.markSupported()) return -1;
is.mark(5);
is.read();is.read();
is.skip(3);
is.reset();
return is.read();
}
}
public static void main(String... sprockets) throws Exception {
final WidgetProcessor p = new WidgetProcessor();
System.out.print(p.getWidgetNumber(new byte[] {1,2,3,4,5,6,7}));
}
}

A. 3
B. 5
C. 7
D. An exception is thrown at runtime.
|
32. Assuming the working directory is accessible, empty, and able to be written, how many file
system objects does the following class create?
1: package kitchen;
2: import java.io.*;
3: public class Bakers {
4: public static void main(String... tooMany) throws IOException {
5: File cake = new File("cake.txt");
6: Writer pie = new FileWriter("pie.txt");
7: pie.flush();
8: new File("fudge.txt").mkdirs();
9: } }
A. None
B. One
C. Two
D. Three
|
33. Let’s say you wanted to read data from a file stored on disk that consists of String, long,
and Object values? Given that the file is quite large, you intend to use three classes to
achieve this result. Which of the following is not one of the three classes you should use?
A. BufferedInputStream
B. BufferedReader
C. FileInputStream
D. ObjectInputStream
|
34. Which statement best describes the following two methods?
public String getNameQuick() throws IOException {
final BufferedReader r = new BufferedReader(
new FileReader("saved.name"));
final String name = r.readLine();
r.flush();
return name;
}
public String getNameSafely() throws IOException {
try(final BufferedReader r = new BufferedReader(

new FileReader("saved.name"))) {
final String name = r.readLine();
r.flush();
return name;
}}
A. Both methods compile and are equivalent to each other.
B. Neither method compiles.
C. Only one of the methods compiles.
D. The methods compile, but one method may lead to a resource leak.
|
35. What is the output of the following application? Assume the System.console() is
available
and the user enters badxbad and presses Enter.
package hardway;
import java.io.*;
public class InconvenientImplementation {
public static void main(String... dontDoThis) throws Exception {
Console c = System.console();
if(c != null) {
c.writer().write('P');
c.writer().write('a');
c.writer().write('s');
c.writer().write('s');
c.writer().flush(); // t1
int i;
StringBuilder sb = new StringBuilder();
while((i = c.reader().read()) != 'x') { // t2
sb.append((char)i);
}
c.writer().format("Result: %s",sb.toString());
}
}
}
A. Result: bad
B. Line t1 does not compile or triggers an exception at runtime.
C. Line t2 does not compile or triggers an exception at runtime.
D. None of the above

|
36. Why does Console readPassword() return a char array rather than a String?
A. It improves performance.
B. It improves security.
C. Passwords must be stored as a char array.
D. String cannot hold the individual password characters.
|
37. Which statement about the following program is true?
package mystical;
import java.io.*;
public class Unicorn {
public void findUnicorns() {
try(InputStream o = new ObjectInputStream(readBook())) {
while(o.read() != -1) {
System.out.println(o.read());
}
} catch (Throwable t) {
throw new RuntimeException(t);
}
}
private InputStream readBook() throws IOException {
return new BufferedInputStream(new FileReader("magic.book"));
}
public static void main(String... horn) {
new Unicorn().findUnicorns();
}
}
A. The code does not compile.
B. The program prints every byte in the file without throwing an exception.
C. The program prints every other byte in the file without throwing an exception.
D. The program throws an EOFException when the end of the file is reached.
|
38. Choose the class that is least likely to be marked Serializable.
A. A class that holds data about the amount of rain that has fallen in a given year
B. A class that manages the memory of running processes in an application
C. A class that stores information about apples in an orchard
D. A class that tracks the amount of candy in a gumball machine

|
39. What is the output of the following application?
package cell;
import java.io.*;
public class TextMessage {
public String receiveText() throws Exception {
try (Reader r = new FileReader("messages.txt")) {
StringBuilder s = new StringBuilder();
int c;
while((c = r.read()) != -1) {
s.append((char)c);
if(r.markSupported()) {
r.mark(100);
r.skip(10);
r.reset();
}
}
return s.toString();
}
}
public void sendText(String message) throws Exception {
try (Writer w = new FileWriter("messages.txt")) {
for(int i=0; i<message.length(); i++) {
w.write(message.charAt(i));
w.skip(1);
}
}
}
public static void main(String[] minutes) throws Exception {
final TextMessage m = new TextMessage();
m.sendText("You up?");
System.out.println(m.receiveText());
} }
A. You up?
B. Y o u u p ?
C. The code does not compile because of the receiveText() method.
D. The code does not compile because of the sendText() method.

|
40. What is the output of the following program? Assume the file paths referenced in the class
exist and are able to be written to and read from.
package heart;
import java.io.*;
public class Valve implements Serializable {
private int chambers = -1;
private transient Double size = null;
private static String color;
public Valve() {
this.chambers = 3;
color = "BLUE";
}
public static void main(String[] love) throws Throwable {
try (ObjectOutputStream o = new ObjectOutputStream(
new FileOutputStream("scan.txt"))) {
final Valve v = new Valve();
v.chambers = 2;
v.size = 10.0;
v.color = "RED";
o.writeObject(v);
}
new Valve();
try (ObjectInputStream o = new ObjectInputStream(
new FileInputStream("scan.txt"))) {
Valve v = (Valve)o.readObject();
System.out.print(v.chambers+","+v.size+","+v.color);
}
}
{ chambers = 4; }
}
A. 2,null,RED
B. 2,null,BLUE
C. 3,10.0,RED
D. The code does not compile.

|
1. Fill in the blanks: A(n) is a file that contains a reference to another file or
directory, while a(n) is a file that contains content.
A. irregular file, regular file
B. regular file, opaque file
C. symbolic link, regular file
D. symbolic link, symbolic directory
|
2. Which methods listed below are found in the NIO.2 Path interface?
I. getRoot()
II. isDirectory()
III. listFiles()
IV. toRealPath()
A. I only
B. I, II, and III
C. I and IV
D. II and III
|
3. Assuming the file /secret/hide.txt exists and is marked hidden, what is result of
executing
the following program?
package hidden;
import java.nio.file.*;
public class Finder {
public void findHiddenFile(Path p) throws Exception {
if(File.isHidden(p)) {
System.out.print("Found!");
}
}
public static void main(String[] folders) throws Exception {
final Finder f = new Finder();
f.findHiddenFile(Paths.get("/secret/hide.txt"));
}
}
A. The class does not compile.
B. An exception is printed at runtime.
C. Found! is printed at runtime.
D. Nothing is printed at runtime.

|
4. Fill in the blanks: Files.walk() performs a traversal, while
Files.find() performs a traversal.
A. breadth-first, breadth-first
B. breadth-first, depth-first
C. depth-first, breadth-first
D. depth-first, depth-first
|
5. When reading file information, what is an advantage of using an NIO.2 attribute interface
rather than reading the values individually from Files methods?
A. Costs fewer round-trips to the file system
B. Guarantees performance improvement
C. Has support for symbolic links
D. Reduces memory leaks
|
6. What is the result of compiling and executing the following program? Assume the current
directory is /stock and the path /stock/sneakers does not exist prior to execution.
package shoe;
import java.io.*;
import java.nio.file.*;
public class Sneaker {
public void setupInventory(Path desiredPath) throws Exception {
Path suggestedPath = Paths.get("sneakers");
if(Files.isSameFile(suggestedPath, desiredPath) // j1
&& !Files.exists(suggestedPath))
Files.createDirectories(desiredPath); // j2
}
public static void main(String[] socks) throws Exception {
Path w = new File("/stock/sneakers").toPath(); // j3
new Sneaker().setupInventory(w);
}
}
A. The directory /stock/sneakers is created.
B. Line j1 does not compile or produces an exception at runtime.
C. Line j2 does not compile or produces an exception at runtime.
D. Line j3 does not compile or produces an exception at runtime.

|
7. Assuming the path referenced below exists and contains a symbolic link that references
/again, what is the expected result of executing the following code snippet?
System.out.print(Files.walk(Paths.get("/again/and/again")).count());
A. An exception is thrown at runtime.
B. A number is printed at runtime.
C. The process hangs indefinitely.
D. The result cannot be determined with the information given.
|
8. Which method in the NIO.2 Files class is equivalent to the java.io.File method
length()?
A. length()
B. size()
C. getLength()
D. None of the above
|
9. Assuming the current working directory is /home, then what is the output of the following
program?
1: package magic;
2: import java.nio.file.*;
3: public class Magician {
4: public String doTrick(Path path) {
5: return path.subpath(2,3)
6: .getName(1)
7: .toAbsolutePath()
8: .toString();
9: }
10: public static void main(String... cards) {
11: final Magician m = new Magician();
12: System.out.print(m.doTrick(
13: Paths.get("/bag/of/tricks/.././disappear.txt")));
14: } }
A. /home/tricks
B. /home
C. The code does not compile.
D. The code compiles but prints an exception at runtime.

|
10. Which methods listed below are found in the NIO.2 Files class?
I. isSameFile()
II. length()
III. relativize()
IV. mkdir()
A. I only
B. I, II, and IV
C. II and III
D. IV only
|
11. The following code snippet, which attempts to move a file system record from
oldHardDrivePath
to newHardDrivePath, results in an exception at runtime.
Which of the following is the most likely type of exception to be thrown?
Files.move(oldHardDrivePath,newHardDrivePath,REPLACE_EXISTING);
A. AtomicMoveNotSupportedException
B. DirectoryNotEmptyException
C. FileAlreadyExistsException
D. None of the above since the line of code does not compile
|
12. Which of the following can be filled into the blank that would allow the method to
compile?
public String getPathName(String fileName) {
final Path p = ;
return p.getFileName();
}
I. new File(fileName).toPath()
II. new Path(fileName)
III. FileSystems.getDefault().getPath(fileName)
A. I and II
B. I and III
C. II
D. None of the above

|
13. Which statement about the following class is correct?
package clone;
import java.io.*;
import java.nio.file.*;
public class Rewriter {
public static void copy(Path source, Path target) throws Exception {
try (BufferedReader r = Files.newBufferedReader(source);
Writer w = Files.newBufferedWriter(target)) {
String temp = null;
while((temp = r.readLine()) != null) {
w.write(temp);
}
}
}
public static void main(String[] tooMany) throws Throwable {
Rewriter.copy(Paths.get("/original.txt"),
FileSystems.getDefault().getPath("/","unoriginal.txt"));
}
}
A. The class compiles without issue.
B. The class never throws an exception at runtime.
C. The implementation correctly copies a regular file.
D. All of the above
|
14. Fill in the blanks: The Files. method returns a List, while the
Files. method returns a Stream.
A. lines(), readAllLines()
B. lines(), readLines()
C. readAllLines(), lines()
D. readLines(), lines()
|
15. What is the output of the following application?
1: package yellow;
2: import java.nio.file.*;
3: public class Road {
4: public boolean findHome() {
5: Path oftenTraveled = Paths.get("/highway/street/spot.txt");
6: Path lessTraveled = Paths.get("/highway/street/house/../.");
7: lessTraveled.resolve("spot.txt");
8: return oftenTraveled.equals(lessTraveled.normalize());

9: }
10: public static void main(String... emerald) {
11: System.out.print("AM I HOME? "
12: +(new Road().findHome() ? "yes" : " no"));
13: }
14: }
A. AM I HOME? no
B. AM I HOME? yes
C. The class does not compile.
D. The class compiles but throws an exception at runtime.
|
16. Which of the following is not an advantage of using an NIO.2 Path instead of a
java.io.File to work with files?
A. Contains built-in support for symbolic links
B. Has ability to read operating-system-specific attributes
C. Provides a single method for deleting a directory tree
D. Provides efficient access of file metadata
|
17. What is the result of executing the following program? Assume the path /driveway exists
and is non-empty, and the directory tree is fully accessible within the file system.
package weather;
import java.io.*;
import java.nio.file.*;
public class Snow {
public static boolean removeSnow(Path flake) throws IOException {
if(!Files.isDirectory(flake) && !Files.isSymbolicLink(flake))
return Files.delete(flake);
else return true;
}
public static void main(String[] cones) throws IOException {
File driveway = new File("/driveway");
for(File f : driveway.listFiles()) {
System.out.println(removeSnow(f.toPath()));
}
}
}
A. The program prints a list of only true values.
B. The program prints a mix of true and false values.
C. The code does not compile.
D. The code compiles but prints an exception at runtime.

|
18. Which interface name inserted into the blank below allows the code snippet to compile?
Path file = Paths.get("/data/movie.txt");
BasicFileAttributes b = Files.readAttributes(file, );
A. BasicFileAttributes.class
B. DosFileAttributes.class
C. PosixFileAttributes.class
D. All of the above
|
19. What is the output of the following code snippet? Assume that the current directory is the
root path.
Path p1 = Paths.get("./locks");
Path p2 = Paths.get("/found/red.zip");
System.out.println(p1.relativize(p2));
System.out.println(p2.relativize(p1));
A. ../found/red.zip
../../locks
B. ../../locks
../found/red.zip
C. locks/../found/red.zip
../found/locks
D. None of the above
|
20. What is the output of the following code snippet? Assume that the current directory is the
root path.
Path p1 = Paths.get("./found/../keys");
Path p2 = Paths.get("/lost/blue.txt");
System.out.println(p1.resolve(p2));
System.out.println(p2.resolve(p1));
A. /lost/blue.txt
./found/../keys
B. /found/../keys/./lost/blue.txt
/lost/blue.txt/keys
C. /lost/blue.txt
/lost/blue.txt/./found/../keys
D. None of the above

|
21. What is the output of the following application? Assume the application is called with a
valid path that exists and is accessible within the file system.
package charity;
import java.nio.file.*;
public class Roster {
protected void printRoster(Path p) {
for(Path f : Files.list(p)) { // n1
if(f.toString().endsWith(".per")) // n2
System.out.print(f);
}
}
public static void main(String... volunteers) {
new Roster().printRoster(Paths.get(volunteers[0]));
}
}
A. A list of file names is printed at runtime.
B. The class does not compile due to line n1.
C. The class does not compile due to line n2.
D. None of the above
|
22. Given the following file system diagram, in which forward is a symbolic link to the java
directory, which value does not print /java/Sort.java at runtime?
java
Sort.java Sort.class Heap.m
/
bin forward
objC
Heap.exe
Path p = Paths.get("/", "objC", "bin");
System.out.println(p.resolve(" ").toRealPath());
A. ../backwards/../forward/Sort.java
B. ../forward/./Sort.java
C. ../java/./forward/Sort.java
D. ../../java/Sort.java

|
23. Using the file system diagram from the previous question, including the symbolic link from
forward to java, how many calls to Files.delete() would need to be made before the
following line could be executed without throwing an exception?
Files.delete(Paths.get("/objC"));
A. One
B. Four
C. Seven
D. None of the above. The symbolic link needs to be removed with
Files.
deleteSymbolicLink() first.
|
24. Assuming the course.txt file exists and is readable, what is the result of executing the
following
application?
package schoolwork;
import java.io.*;
import java.nio.file.*;
public class Notes {
public void printNotes() {
try (OutputStream out = System.out) { // y1
Files.copy(out, Paths.get("course.txt"));
} catch (IOException e) {
throw new RuntimeException(e);
}
}
public static void main(String[] coursework) {
new Notes().printNotes();
}
}
A. The code compiles but prints an exception at runtime.
B. The class does not compile due to line y1.
C. The code does not compile for some other reason.
D. The program prints the contents of the course.txt file.
|
25. When reading file information, what is an advantage of loading aBasicFileAttributeView
over a BasicFileAttributes?
A. Allows the hidden attribute to be set
B. Allows the last modified date to be changed
C. All of the file information is read in a single round-trip.
D. There is no advantage.

|
26. The Rose application is run with an input argument of /flower. The /flower directory
contains five subdirectories, each of which contains five files. How many Path values does
the following application print?
import java.nio.file.*;
public class Rose {
public void tendGarden(Path p) throws Exception {
Files.walk(p,1)
.map(p -> p.toRealPath())
.forEach(System.out::println);
}
public static void main(String... thorns) throws Exception {
new Rose().tendGarden(Paths.get(thorns[0]));
}
}
A. None
B. One
C. Six
D. Thirty-one
|
27. Which of the following statements, when run independently, produces a
NullPointerException
at runtime?
I. Paths.get("../sang").getParent().getParent()
II. Paths.get("/sing").getParent().getRoot()
III. Paths.get("/song").getRoot().getRoot()
IV. Paths.get("../sung").getRoot().getParent()
A. I and III
B. I and IV
C. II and III
D. IV only
|
28. Which statement about the following Finalize class is correct?
1: package end;
2: import java.nio.file.*;
3: public class Finalize {
4: public Path makeAbsolute(Path p) {
5: if(p!=null && !p.isAbsolute())
6: return p.toAbsolutePath();

7: return p;
8: }
9: }
A. It does not compile because IOException is neither handled nor declared.
B. It does not compile for some other reason.
C. The method compiles and returns a Path value that is always equivalent to the input
argument.
D. The method compiles and returns a Path value that may not be equivalent to the input
argument.
|
29. Which of the following is a difference between the createDirectory() and
createDirectories()
methods found in the NIO.2 Files class?
A. One takes multiple Path arguments; the other does not.
B. One throws an exception if a file already exists at the directory path; the other does
not.
C. One declares a checked exception; the other does not.
D. One creates a single directory while the other may create many directories.
|
30. Assuming the current working directory is /hail, what is the expected output of executing
the following code snippet?
Path w1 = Paths.get("../jungle/.././rain..")
.toAbsolutePath().normalize();
System.out.print(w1.resolve("snow.txt"));
A. /jungle/snow.txt
B. /hail/rain../snow.txt
C. /rain../snow.txt
D. An exception is printed at runtime.
|
31. What is the output of the following application?
package med;
import java.nio.file.*;
public class Surgeon {
public Path rebuild(Path p) {
Path v = null;
for(int i=0; i<p.getNameCount(); i++)
if(v==null) v = p.getName(i);
else v = v.resolve(p.getName(i));
return v;
}
public static void main(String... tools) {
final Surgeon al = new Surgeon();

Path original = Paths.get("/tissue/heart/chambers.txt");
Path repaired = al.rebuild(original);
System.out.print(original.equals(repaired));
}
}
A. false
B. true
C. The code does not compile.
D. The code compiles but prints an exception at runtime.
|
32. Under which circumstances does Files.deleteIfExists() not throw an exception?
A. The file system suddenly becomes unavailable.
B. The path does not exist.
C. The path represents a non-empty directory.
D. The process does not have write access to a path.
|
33. What is the output of the following code snippet? Assume all referenced paths exist within
the file system.
Path v1 = Path.get("/./desert/./").resolve(Paths.get("sand.doc"));
Path v2 = new File("/desert/./cactus/../sand.doc").toPath();
System.out.print(Files.isSameFile(v1,v2));
System.out.print(" "+v1.equals(v2));
System.out.print(" "+v1.normalize().equals(v2.normalize()));
A. false false false
B. true false true
C. true true true
D. None of the above
|
34. How many lines of the following program contain compilation errors?
public class Song {
public static void organize(Path folder, Path file) throws IOException {
Path p = folder.resolve(file);
BasicFileAttributeView vw = Files.getFileAttributeView(p,
BasicFileAttributes.class);
if(vw.creationTime().toMillis()<System.currentTimeMillis()) {
vw.setTimes(FileTime.fromMillis(System.currentTimeMillis()),
null,null);
}
}
public static void main(String[] audio) throws Exception {

Song.organize(Paths.get("/", "pub"),new File("/songs").toPath());
}
}
A. None
B. One
C. Two
D. Three
|
35. What is the output of the following application?
package stars;
import java.nio.file.*;
public class Sun {
public void printInfo() {
Path halleysComet = Paths.get("stars/./rocks/../m1.meteor")
.normalize();
Path lexellsComet = Paths.get("./stars/../solar/");
lexellsComet = lexellsComet.subpath(0, 2)
.resolve("m1.meteor")
.normalize();
System.out.print(halleysComet.equals(lexellsComet)
? "Same!" : "Different!");
}
public static void main(String... emerald) {
Sun s = new Sun();
s.printInfo();
}
}
A. Different!
B. Same!
C. The class does not compile.
D. The class compiles but throws an exception at runtime.
|
36. Assuming the directory /eclipse/projects exists and its contents are accessible, which
statement about the following code snippet is correct?
Path p = Paths.get("/eclipse/projects");
Files.walk(p)
.map(z -> z.toAbsolutePath().toString())
.filter(s -> s.endsWith(".java"))

.collect(Collectors.toList()).forEach(System.out::println);
Files.find(p,Integer.MAX_VALUE,
(w,a) -> w.toAbsolutePath().toString().endsWith(".java"))
.collect(Collectors.toList()).forEach(System.out::println);
A. The first stream statement does not compile.
B. The second stream statement does not compile.
C. Both statements compile but are unlikely to print the same results at runtime.
D. None of the above
|
37. Assuming the file referenced below exists and is significantly large, which statement about
the following program is correct?
public class SpeedRead {
public void jenniferReads(Path p) {
Files.lines(p);
}
public void jonReads(Path p) {
Files.readAllLines(p);
}
public static void main(String[] pages) {
Path p = Paths.get("/bookshelf/mobydick.txt");
final SpeedRead r = new SpeedRead();
r.jenniferReads(p);
r.jonReads(p);
}
}
A. The code does not compile.
B. The method jenniferReads() is likely to take longer to run.
C. The method jonReads() is likely to take longer to run.
D. It is not possible to know which method will take longer to run.
|
38. What is the result of executing the following program? Assume the files referenced in the
application both exist and are fully accessible within the file system.
package duplicate;
import static java.nio.file.StandardCopyOption.*;
import static java.nio.file.Files.*;
import java.io.*;
import java.nio.file.*;
public class CopyOfACopy {

public void main(String[] items) throws Exception {
final Path s = new File("apples.zip").toPath();
final Path t = FileSystems.getDefault().getPath("oranges.zip");
copy(s,t,REPLACE_EXISTING); // q1
copy(Files.newBufferedReader(t),t,ATOMIC_MOVE); // q2
}
}
A. Line q1 does not compile.
B. Line q1 produces an exception at runtime.
C. Line q2 does not compile.
D. Line q2 produces an exception at runtime.
|
39. Which of the following Files methods requires the enclosing method to handle or declare
a checked exception?
A. exists()
B. isDirectory()
C. isSameFile()
D. isSymbolicLink()
|
40. What is the output of the following application? Assume /all-data exists and is accessible
within the file system.
package numbers;
import java.nio.file.*;
import java.util.stream.Stream;
public class TheCount {
public static Stream<String> readLines(Path p) {
try {
return Files.lines(p);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static long count(Path p) throws Exception {
return Files.list(p)
.filter(w -> Files.isRegularFile(w))
.flatMap(s -> readLines(s))
.count();
}

public final static void main(String[] day) throws Exception {
System.out.print(count(Paths.get("/all-data")));
}
}
A. The number of lines in all files in a directory tree
B. The number of lines in all files in a single directory
C. The code does not compile.
D. The code compiles but prints an exception at runtime.


|
1. Which of the following methods is not available on an ExecutorService instance?
A. execute(Callable)
B. execute(Runnable)
C. submit(Callable)
D. submit(Runnable)
|
2. Which statements about executing the following TicketTaker application multiple times
are true?
package performance;
import java.util.concurrent.atomic.*;
import java.util.stream.*;
public class TicketTaker {
long ticketsSold;
final AtomicInteger ticketsTaken;
public TicketTaker() {
ticketsSold = 0;
ticketsTaken = new AtomicInteger(0);
}
public void performJob() {
IntStream.iterate(1, p -> p+1)
.parallel()
.limit(10)
.forEach(i -> ticketsTaken.getAndIncrement());
IntStream.iterate(1, q -> q+1)
.limit(5)
.parallel()
.forEach(i -> ++ticketsSold);
System.out.print(ticketsTaken+" "+ticketsSold);
}
public static void main(String[] matinee) {
new TicketTaker().performJob();
}
}
I. The class compiles and runs without throwing an exception.
II. The first number printed is consistently 10.
III. The second number printed is consistently 5.
A. I only
B. I and II
C. I, II, and III
D. None of the above

|
3. Which of the following is a recommended way to define an asynchronous task?
A. Create a Callable expression and pass it to an instance of Executors.
B. Create a class that extends Thread and overrides the start() method.
C. Create a Runnable expression and pass it to a Thread constructor.
D. All of the above
|
4. Let’s say you needed a thread executor to create tasks for a CyclicBarrier that has a
barrier
limit of five threads. Which static method in ExecutorService should you
use to obtain it?
A. newSingleThreadExecutor()
B. newSingleThreadScheduledExecutor()
C. newCachedThreadPool()
D. None of these would work.
|
5. Given the original array, how many of the following for statements result in an exception
at runtime, assuming each is executed independently?
List<Integer> original = new ArrayList<>(Arrays.asList(1,2,3,4,5));
List<Integer> copy1 = new CopyOnWriteArrayList<>(original);
for(Integer w : copy1)
copy1.remove(w);
List<Integer> copy2 = Collections.synchronizedList(original);
for(Integer w : copy2)
copy2.remove(w);
List<Integer> copy3 = new ArrayList<>(original);
for(Integer w : copy3)
copy3.remove(w);
Queue<Integer> copy4 = new ConcurrentLinkedQueue<>(original);
for(Integer w : copy4)
copy4.remove(w);
A. Zero
B. One
C. Two
D. Three
|
6. Fill in the blanks: is a special case of , in which two or
more active threads try to acquire the same set of locks and are repeatedly unsuccessful.
A. Deadlock, livelock
B. Deadlock, resource starvation
C. Livelock, resource starvation
D. Resource starvation, race conditions

|
7. What is the output of the following application?
1: package office;
2: import java.util.concurrent.*;
3: public class TpsReport {
4: public void submitReports() {
5: ExecutorService service = Executors.newCachedThreadPool();
6: Future bosses = service.submit(() -> System.out.print(""));
7: service.shutdown();
8: System.out.print(bosses.get());
9: }
10: public static void main(String[] memo) {
11: new TpsReport().submitReports();
12: }
13: }
A. null
B. The code does not compile.
C. Line 7 throws an exception at runtime.
D. Line 8 throws an exception at runtime.
|
8. Which of the following static methods does not exist in the Executors class?
A. newFixedScheduledThreadPool()
B. newFixedThreadPool()
C. newSingleThreadExecutor()
D. newSingleThreadScheduledExecutor()
|
9. How many times does the following application print Ready at runtime?
package parade;
import java.util.concurrent.*;
public class CartoonCat {
private void await(CyclicBarrier c) {
try {
c.await();
} catch (Exception e) {}
}
public void march(CyclicBarrier c) {
ExecutorService s = Executors.newSingleThreadExecutor();
for(int i=0; i<12; i++)
s.execute(() -> await(c));
s.shutdown();
}

public static void main(String... strings) {
new CartoonCat().march(new CyclicBarrier(4,
() -> System.out.println("Ready")));
}
}
A. Zero
B. One
C. Three
D. The code does not compile.
|
10. Which thread-safe class would you use to add elements to the front and back of an ordered
data structure and includes methods for waiting a specified amount of time to do so?
A. BlockingDeque
B. ConcurrentLinkedDeque
C. ConcurrentSkipListSet
D. LinkedBlockingDeque
|
11. Three of the four methods below always produce the same result whether they are executed
on a serial or parallel ordered stream. Which one does not?
A. findAny()
B. findFirst()
C. limit()
D. skip()
|
12. What is the result of executing the following application multiple times?
package bears;
import java.util.*;
public class Bounce {
public static void main(String... legend) {
Arrays.asList(1,2,3,4).stream()
.forEach(System.out::println);
Arrays.asList(1,2,3,4).parallel()
.forEachOrdered(System.out::println);
}
}
A. Only the first array is printed in the same order every time.
B. Only the second array is printed in the same order every time.
C. Both arrays are printed in the same order every time.
D. None of the above

|
13. Fill in the blanks: In the fork/join framework, using the class requires
overriding an abstract compute() method containing a generic return type, while using the
class requires overriding an abstract compute() method containing a
void return type.
A. ForkJoinTask, RecursiveAction
B. RecursiveAction, RecursiveTask
C. RecursiveTask, ForkJoinTask
D. RecursiveTask, RecursiveAction
|
14. Given the following code snippet, which lambda expression is the best choice for the accumulator,
based on the rules for applying a parallel reduction?
public class GoodAccumulator {
int i;
public void test() {
BiFunction<Integer,Integer,Integer> accumulator = ;
System.out.print(Arrays.asList(1,2,3,4,5)
.parallelStream()
.reduce(0,accumulator,(s1, s2) -> s1 + s2));
}
}
A. (a,b) -> (a-b)
B. (a,b) -> 5
C. (a,b) -> i++
D. None of the above are appropriate.
|
15. What is the output of the following code snippet?
Callable c = new Callable() {
public Object run() {return 10;}
};
ExecutorService s = Executors.newScheduledThreadPool(1);
for(int i=0; i<10; i++) {
Future f = s.submit(c);
f.get();
}
s.shutdown();
System.out.print("Done!");
A. Done!
B. The code does not compile.
C. The code hangs indefinitely at runtime.
D. The code throws an exception at runtime.

|
16. The following diagrams represent the order of read/write operations of two threads sharing
a common variable. Each thread first reads the value of the variable from memory and then
writes a new value of the variable back to memory. Which diagram demonstrates proper
synchronization?
A.
Thread 1
Thread 2
Time
Shared Memory
B.
Thread 1
Thread 2
Time
Shared Memory
C.
Thread 1
Thread 2
Time
Shared Memory
D.
Thread 1
Thread 2
Time
Shared Memory
|
17. What is the output of the following application?
package story;
import java.util.*;
import java.util.concurrent.*;
public class Race {
static ExecutorService service = Executors.newFixedThreadPool(8);
public static int sleep() {
try {
Thread.sleep(1000);
} catch (Exception e) {}
return 1;
}

public static void hare() {
try {
Callable c = () -> sleep();
final Collection<Callable<Integer>> r = Arrays.asList(c,c,c);
List<Future<Integer>> results = service.invokeAll(r);
System.out.println("Hare won the race!");
} catch (Exception e) {e.printStackTrace();}
}
public static void tortoise() {
try {
Callable c = () -> sleep();
final Collection<Callable<Integer>> r = Arrays.asList(c,c,c);
Integer result = service.invokeAny(r);
System.out.println("Tortoise won the race!");
} catch (Exception e) {e.printStackTrace();}
}
public static void main(String[] p) throws Exception {
service.execute(() -> hare());
service.execute(() -> tortoise());
}
}
A. Hare won the race! is printed first.
B. Tortoise won the race! is printed first.
C. The code does not compile.
D. The result is unknown until runtime.
|
18. Which of the following concurrent collections is sorted?
A. ConcurrentLinkedQueue
B. ConcurrentSkipListMap
C. CopyOnWriteArrayList
D. LinkedBlockingQueue
|
19. What is the most likely result of executing the following application?
package unknown;
import java.util.concurrent.*;
public class Riddle {
public void sleep() {
try {
Thread.sleep(5000);
} catch (Exception e) {}
}

public String getQuestion(Riddle r) {
synchronized {
sleep();
if(r != null) r.getAnswer(null);
return "How many programmers does it take "
+ "to change a light bulb?";
}
}
public synchronized String getAnswer(Riddle r) {
sleep();
if(r != null) r.getAnswer(null);
return "None, that's a hardware problem";
}
public static void main(String... ununused) {
final Riddle r1 = new Riddle();
final Riddle r2 = new Riddle();
ExecutorService s = Executors.newFixedThreadPool(2);
s.submit(() -> r1.getQuestion(r2));
s.execute(() -> r2.getAnswer(r1));
s.shutdown();
}
}
A. A deadlock is produced at runtime.
B. A livelock is produced at runtime.
C. The application completes successfully.
D. The code does not compile.
|
20. Which ScheduledExecutorService method can result in the same action being executed
by two threads at the same time?
A. scheduleAtFixedDelay()
B. scheduleAtFixedRate()
C. scheduleWithFixedDelay()
D. There is no such method in ScheduledExecutorService.
|
21. What is the output of the following application?
package olympics;
import java.util.concurrent.*;
public class Athlete {
int stroke = 0;
public synchronized void swimming() {
stroke++;
}

public static void main(String... laps) {
ExecutorService s = Executors.newFixedThreadPool(10);
Athlete a = new Athlete();
for(int i=0; i<1000; i++) {
s.execute(() -> a.swimming());
}
s.shutdown();
System.out.print(a.stroke);
}
}
A. 1000
B. The code does not compile.
C. The result is unknown until runtime because stroke is not accessed in a thread-safe
manner and a write may be lost.
D. The result is unknown until runtime for some other reason.
|
22. Which of the following is most likely to be caused by a race condition?
A. A thread perpetually denied access to a resource
B. An int variable incorrectly reporting the number of times an operation was performed
C. Two threads actively trying to restart a blocked process that is guaranteed to always
end the same way
D. Two threads endlessly waiting on each other to release shared locks
|
23. What is the output of the following application?
package farm;
import java.util.concurrent.*;
public class CountSheep extends RecursiveAction {
static int[] sheep = new int[] {1,2,3,4};
final int start;
final int end;
int count = 0;
public CountSheep(int start, int end) {
this.start = start;
this.end = end;
}
public void compute() {
if(end-start<2) {
count+=sheep[start];
return;
} else {

int middle = start + (end-start)/2;
invokeAll(new CountSheep(start,middle),
new CountSheep(middle,end));
}
}
public static void main(String[] night) {
ForkJoinPool pool = new ForkJoinPool();
CountSheep action = new CountSheep(0,sheep.length);
pool.invoke(action);
pool.shutdown();
System.out.print(action.count);
}
}
A. 0
B. 10
C. The code does not compile.
D. None of the above.
|
24. Which statement about parallel streams is correct?
A. A parallel stream always executes all stream operations faster than a serial stream.
B. A parallel stream always executes certain stream operations faster than a serial stream.
C. A parallel stream synchronizes its operations so that they are atomic.
D. All streams can be converted to a parallel stream.
|
25. What is a possible output of the following application?
package salvage;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
public class Car {
private String model;
private int year;
public Car(String name, int year) {
this.model = name; this.year = year;
}
public int getYear() {return year;}
@Override public String toString() {return model;}
public static void main(String... make) {
List<Car> cars = new ArrayList<>();
cars.add(new Car("Mustang",1967));

cars.add(new Car("Thunderbird",1967));
cars.add(new Car("Escort",1975));
ConcurrentMap<Integer, List<Car>> map = cars
.stream()
.collect(Collectors.groupingByConcurrent(Car::getYear));
System.out.print(map);
}
}
A. {1975=[Escort], 1967=[Thunderbird, Mustang]}
B. {Escort=[1975], Thunderbird=[1967], Mustang=[1967]}
C. The code does not compile.
D. The application throws an exception at runtime because the stream is not parallel.
|
26. What is the output of the following application?
package exercise;
import java.util.*;
public class Concat {
public String concat1(List<String> values) {
return values.parallelStream()
.reduce("a",
(x,y)->x+y,
String::concat);
}
public String concat2(List<String> values) {
return values.parallelStream()
.reduce((w,z)->z+w).get();
}
public static void main(String... questions) {
Concat c = new Concat();
List<String> list = Arrays.asList("Cat","Hat");
String x = c.concat1(list);
String y = c.concat2(list);
System.out.print(x+" "+y);
}
}
A. aCataHat HatCat
B. CatHat CatHat
C. The code does not compile because concat1() returns an Optional.
D. The code does not compile for a different reason.

|
27. What is the output of the following application?
package taxes;
import java.util.concurrent.*;
public class Accountant {
public static void completePaperwork() {
System.out.print("[Filing]");
}
public static double getPi() {
return 3.14159;
}
public static void main(String[] args) throws Exception {
ExecutorService x = Executors.newSingleThreadExecutor();
Future<?> f1 = x.submit(() -> completePaperwork());
Future<Object> f2 = x.submit(() -> getPi());
System.out.print(f1.get()+" "+f2.get());
x.shutdown();
}
}
A. [Filing]null 3.14159
B. The declaration of f1 does not compile.
C. The declaration of f2 does not compile.
D. An exception is thrown at runtime.
|
28. Which statement about the following class is correct?
package my;
import java.util.*;
public class ThreadSafeList {
private List<Integer> data = new ArrayList<>();
public synchronized void addValue(int value) {
data.add(value);
}
public int getValue(int index) {
return data.get(index);
}
public int size() {
synchronized(ThreadSafeList.class) {
return data.size();
}
}
}

A. The code does not compile because of the size() method.
B. The code compiles and is thread-safe.
C. The code compiles and is not thread-safe.
D. The code does not compile for another reason.
|
29. Which two method names, when filled into the print2() method, produce the same output
as the print1() method? Assume the input arguments for each represent the same nonnull
numeric value, only accessible by a single thread at a time.
public static void print1(int value) {
System.out.println(value--);
System.out.println(++value);
}
public static void print2(AtomicInteger value) {
System.out.println(value. );
System.out.println(value. );
}
A. decrementAndGet() and getAndIncrement()
B. decrementAndGet() and incrementAndGet()
C. getAndDecrement() and getAndIncrement()
D. getAndDecrement() and incrementAndGet()
|
30. How many times does the following application print 1 at runtime?
package crew;
import java.util.concurrent.*;
import java.util.stream.*;
public class Boat {
private void waitTillFinished(CyclicBarrier c) {
try {
c.await();
System.out.print("1");
} catch (Exception e) {}
}
public void row(ExecutorService service) {
final CyclicBarrier cb = new CyclicBarrier(5);
IntStream.iterate(1, i-> i+1)
.limit(12)
.forEach(i -> service.submit(() -> waitTillFinished(cb)));
}
public static void main(String[] oars) {
ExecutorService service = null;

try {
service = Executors.newCachedThreadPool();
new Boat().row(service);
} finally {
service.isShutdown();
}
}
}
A. 0
B. 10
C. 12
D. None of the above
|
31. Using the Boat class from the previous question, what is the final state of the application?
A. The application produces an exception at runtime.
B. The application terminates successfully.
C. The application hangs indefinitely because the ExecutorService is never shut down.
D. The application produces a deadlock at runtime.
|
32. What is the expected output of the following application?
package store;
import java.util.concurrent.*;
import java.util.stream.*;
public class Line {
static BlockingDeque<Integer> queue = new LinkedBlockingDeque<>();
public static void main(String[] participants) throws Exception {
IntStream.iterate(1, i -> i+1).limit(5)
.parallel()
.forEach(s -> queue.offerLast(s,10000,TimeUnit.MILLISECONDS));
IntStream.iterate(1, i -> 5).limit(10)
.parallel()
.forEach(s -> queue.pollFirst(10,TimeUnit.SECONDS));
System.out.print(queue.size());
}
}
A. 0
B. A number from 0 to 5
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
33. Given the original array, how many of the following for statements result in an infinite
loop at runtime, assuming each is executed independently?
List<Integer> original = new ArrayList<>(Arrays.asList(1,2,3));
List<Integer> copy1 = new ArrayList<>(original);
for(Integer q : copy1)
copy1.add(1);
List<Integer> copy2 = new CopyOnWriteArrayList<>(original);
for(Integer q : copy2)
copy2.add(2);
Deque<Integer> copy3 = new ConcurrentLinkedDeque<>(original);
for(Integer q : copy3)
copy3.push(3);
List<Integer> copy4 = Collections.synchronizedList(original);
for(Integer q : copy4)
copy4.add(4);
A. Zero
B. One
C. Two
D. Three
|
34. Three of the four following options make up the requirements for performing a parallel
reduction with the collect() method, which takes a Collector argument. Choose the
one that is not a requirement.
A. The Collector argument is marked concurrent.
B. The elements of the stream implement the Comparable interface.
C. The stream is parallel.
D. The stream or Collector is marked unordered.
|
35. Which statement about the following application is true?
package math;
import java.util.concurrent.*;
public class Fun extends RecursiveTask<Integer> {
final int value;
public Fun(int value) {
this.value = value;
}
@Override protected Integer compute() { // w1
if(value<1) {
return 1;

}
final Fun f1 = new Fun(value-1);
final Fun f2 = new Fun(value-2);
return f1.compute() * f2.compute();
}
public static void main(String... data) {
ForkJoinPool pool = new ForkJoinPool();
try {
System.out.print(pool.invoke(new Fun(10)));
} finally {
pool.shutdown();
}
}
}
A. The class does not compile due to line w1.
B. The class does not compile for another reason.
C. The application compiles and uses the fork/join framework correctly.
D. The application compiles but does not use the fork/join framework correctly.
|
36. Which ExecutorService method guarantees all running tasks are stopped in an orderly
fashion?
A. shutdown()
B. shutdownNow()
C. halt()
D. None of the above
|
37. Given the following code snippet, what statement about the values printed on lines p1 and
p2 is correct?
List<Integer> db = Collections.synchronizedList(new ArrayList<>());
IntStream.iterate(1, i -> i+1).limit(5)
.parallel()
.map(i -> {db.add(i); return i;})
.forEachOrdered(System.out::print); // p1
System.out.println();
db.forEach(System.out::print); // p2
A. They are always the same.
B. They are sometimes the same.
C. They are never the same.
D. The code will produce a ConcurrentModificationException at runtime.

|
38. Assuming 10 seconds is enough time for all of the tasks to finish, what is the output of the
following application?
package finance;
import java.util.concurrent.*;
public class Bank {
static int cookies = 0;
public synchronized void deposit(int amount) {
cookies += amount;
}
public static synchronized void withdrawal(int amount) {
cookies -= amount;
}
public static void main(String[] amount) throws Exception {
ExecutorService teller = Executors.newScheduledThreadPool(50);
Bank bank = new Bank();
for(int i=0; i<25; i++) {
teller.submit(() -> bank.deposit(5));
teller.submit(() -> bank.withdrawal(5));
}
teller.shutdown();
teller.awaitTermination(10, TimeUnit.SECONDS);
System.out.print(bank.cookies);
}
}
A. 0
B. The code does not compile.
C. The result is unknown until runtime.
D. An exception is thrown at runtime.
|
39. What is the output of the following application?
package util;
import java.util.*;
public class SearchList<T> {
private List<T> data;
private boolean foundMatch = false;
public SearchList(List<T> list) {
this.data = list;
}
public void exists(T value,int start, int end) {
if(end-start<=1) {

foundMatch = foundMatch || value.equals(data.get(start));
} else {
final int middle = start + (end-start)/2;
new Thread(() -> exists(value,start,middle)).run();
new Thread(() -> exists(value,middle,end)).run();
}
}
public static void main(String[] a) throws Exception {
List<Integer> data = Arrays.asList(1,2,3,4,5,6);
SearchList<Integer> t = new SearchList<Integer>(data);
t.exists(5, 0, data.size());
System.out.print(t.foundMatch);
}
}
A. true
B. false
C. The code does not compile.
D. The result is unknown until runtime.
|
40. How many lines of the following code snippet contain compilation errors?
11: ScheduledExecutorService t = Executors
12: .newSingleThreadScheduledExecutor();
13: Future result = t.execute(System.out::println);
14: t.invokeAll(null);
15: t.scheduleAtFixedRate(() -> {return;}, 5, TimeUnit.MINUTES);
A. None. The code compiles as is.
B. One
C. Two
D. Three


|
1. How many of Connection, Driver, and DriverManager are JDBC interfaces included with
the JDK?
A. None
B. One
C. Two
D. Three
|
2. Which is found in the java.sql package?
A. DerbyDriver
B. MySqlDriver
C. OracleDriver
D. None of the above
|
3. What must be the first characters of a database URL?
A. db,
B. db:
C. jdbc,
D. jdbc:
|
4. Which is responsible for getting a connection to the database?
A. Driver
B. Connection
C. Statement
D. ResultSet
|
5. Which most accurately fills in the blanks in this sentence? With JDBC 3.0, the driver is
to contain a java.sql.Driver file, and the code getting a Connection
is to call Class.forName().
A. allowed, allowed
B. allowed, required
C. required, allowed
D. required, required
|
6. Which of these obtains a Connection?
A. Connection.getConnection(url)
B. Driver.getConnection(url)
C. DriverManager.getConnection(url)
D. new Connection(url)
|
7. Which method is overloaded to allow passing a username and password?
A. forName()
B. getConnection()

C. getStatement()
D. None of the above
|
8. What is the name of a concrete class that implements Statement and is included in the
core JDK?
A. CallableStatement
B. PreparedStatement
C. StatementImpl
D. None of the above
|
9. How many of the following could be valid JDBC URL formats for an imaginary driver
named magic and a database named box?
I. jdbc:magic:127.0.0.1:1234/box
II. jdbc:magic:box
III. jdbc:magic:@127.0.0.1:1234
A. None
B. One
C. Two
D. Three
|
10. Which most accurately fills in the blanks in this sentence? With JDBC 4.0, the driver is
to contain a java.sql.Driver file, and the code getting a Connection
is to call Class.forName().
A. allowed, allowed
B. allowed, required
C. required, allowed
D. required, required
|
11. Which pair of statements is true when requesting a ResultSet to be both scroll sensitive
and updatable?
I. The scroll sensitive option is passed as a parameter before the updatable parameter.
II. The updatable option is passed as a parameter before the scroll sensitive parameter.
III. If these options are not available, the database driver returns a ResultSet with different
options.
IV. If these options are not available, the database driver throws a SQLException.
A. I, III
B. I, IV
C. II, III
D. II, IV

|
12. Suppose the blue database exists and we are using a JDBC 4.0 driver. Which is the
outcome
of this code?
String url = "jdbc:derby:blue";
Class.forName(url);
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select count(*) from sky")) {
System.out.println(rs.getInt(1));
}
A. It runs successfully and prints the number of rows in the sky table.
B. It throws a ClassNotFoundException.
C. It throws a SQLException.
D. It does not compile.
|
13. Fill in the blanks: There are ResultSet concurrency modes, and drivers are
required to support .
A. two, both
B. two, one of them
C. three, two of them
D. three, all of them
|
14. What is the output when run with a JDBC 4.0 driver if the clowns database exists and
contains
an empty clowns table?
String url = "jdbc:derby:clowns";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select count(*) from clowns")) {
System.out.println(rs.getInt(1));
}
A. 0
B. 1
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
15. Consider the three methods execute(), executeQuery(), and executeUpdate(). Fill in
the blanks: of these methods is/are allowed to run a DELETE SQL statement while
of these methods is/are allowed to run an UPDATE SQL statement.
A. One, one
B. One, two
C. Two, one
D. Two, two

|
16. Assuming the clowns database exists and contains one empty table named clowns, what is
the output of the following when run using a JDBC 4.0 driver?
import java.sql.*;
public class EmptyTable {
public static void main(String[] args) throws SQLException { // s1
String url = "jdbc:derby:clowns";
try (Connection conn = new Connection(url); // s2
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from clowns")) {
if (rs.next())
System.out.println(rs.getString(1));
}
}
}
A. The code terminates successfully without any output.
B. The code does not compile due to line s1.
C. The code does not compile due to line s2.
D. None of the above
|
17. Which are valid ResultSet types?
I. TYPE_BACKWARD_ONLY
II. TYPE_FORWARD_ONLY
III. TYPE_REVERSE_ONLY
A. II
B. I and II
C. II and III
D. None of the above
|
18. Given the table books in the figure and a ResultSet created by running the following SQL
statement, which option prints the value 379?
title
character varying(255)
OCA
OCP
379
669
num_pages
integer
select * from cert where title = 'OCA'
A. System.out.println(rs.getInt(1));
B. System.out.println(rs.getInt(2));
C. System.out.println(rs.getInteger(1));
D. System.out.println(rs.getInteger(2));

|
19. Given the table books in the previous question and a ResultSet created by running this
SQL statement, which option prints OCP?
select title from cert where num_pages > 500
A. System.out.println(rs.getString());
B. System.out.println(rs.getString("0"));
C. System.out.println(rs.getString("1"));
D. System.out.println(rs.getString("title"));
|
20. Assume the database exists with all referenced table and column names. Which is a true
statement when a JDBC 4.0 driver is used?
String url = "jdbc:derby:precipitation";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement(
ResultSet.CONCUR_READ_ONLY,
ResultSet.TYPE_SCROLL_INSENSITIVE);
ResultSet rs = stmt.execute(
"select total from precip where type = 'rain'")) {
System.out.println(rs.getString("total"));
}
A. There is a compiler error on the line of code that creates the Statement.
B. There is a compiler error on the line of code that creates the ResultSet.
C. This code compiles and runs without error.
D. This code throws a SQLException at runtime.
|
21. Which resources have their close() method called when this code runs?
public static void runQuery(Connection conn) throws SQLException{
try (Statement stmt = conn.createStatement()) {
ResultSet rs = stmt.executeQuery("select * from clowns");
rs.next();
}
}
A. No close() methods are called.
B. Only Statement
C. Only Statement and Connection
D. Only Statement and ResultSet
|
22. Which statement is true about the JDBC core classes?
A. Driver is an implementation of DriverManager.
B. A general Connection implementation is included in the JDK.

C. A Statement automatically starts in auto-commit mode.
D. A ResultSet automatically starts pointing to the first row of data.
|
23. Which of the following is required in a database driver implementation?
A. A file named jdbc.driver
B. A file named java.sql.Driver
C. At least one implementation of the Connection interface
D. None of the above
|
24. Given that the people table has 10 rows, what is the result of the following when using a
driver that supports a scroll sensitive ResultSet?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement(
ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
ResultSet rs = stmt.executeQuery("select count(*) from people")) {
rs.next();
rs.absolute(0); // q1
System.out.print(rs.getInt(1)); // q2
}
A. 10
B. The code does not compile.
C. Line q1 throws a SQLException.
D. Line q2 throws a SQLException.
|
25. Given a scrollable updatable ResultSet that contains the following, what does the code
snippet output?
color
character varying(255)
black
blue
red
20
5
0
count
integer
rs = stmt.executeQuery("select * from pens");
rs.afterLast();
rs.previous();
rs.updateInt(2, 10);
rs.updateRow();
rs = stmt.executeQuery("select * from pens where color = 'red'");
while (rs.next())
System.out.println(rs.getInt(2));

A. 0
B. 10
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
26. Given a scrollable updatable ResultSet represented by the image in the previous question,
what does the code snippet output?
rs = stmt.executeQuery("select * from pens");
rs.afterLast();
while(rs.prev())
rs.updateInt(2,0);
rs = stmt.executeQuery("select * from pens where color = 'black'");
while (rs.next())
System.out.println(rs.getInt(2));
A. 0
B. 20
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
27. How many rows are added to the colors table from running the following?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement()) {
conn.setAutoCommit(false);
stmt.executeUpdate("insert into colors values ('red')");
stmt.executeUpdate("insert into colors values ('blue')");
conn.commit();
conn.setAutoCommit(true);
stmt.executeUpdate("insert into colors values ('green')");
}
A. None
B. One
C. Two
D. Three
|
28. Which is true if the clowns database exists and contains an empty clowns table?
String url = "jdbc:derby:clowns";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select count(*) from clowns")) {

rs.next(); // r1
System.out.println(rs.getInt(1)); // r2
}
A. The code compiles and runs without error.
B. The code does not compile.
C. The code compiles but throws an exception at runtime on line r1.
D. The code compiles but throws an exception at runtime on line r2.
|
29. Suppose the ResultSet is scrollable and contains 10 rows with the values 1–10 respectively.
What is the output of the following?
5: rs.absolute(0);
6: rs.relative(5);
7: rs.relative(-10);
8: rs.relative(5);
9: System.out.print(rs.getInt(1));
A. 4
B. 5
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
30. Suppose the blue database does not exist and we are using a JDBC 4.0 driver. Which is the
outcome of this code?
String url = "jdbc:derby:blue";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select count(*) from sky")) {
System.out.println(rs.getInt(1));
}
A. It runs successfully and prints the number of rows in the sky table.
B. It throws a ClassNotFoundException.
C. It throws a SQLException.
D. It does not compile.
|
31. What is the most likely outcome of this code if the people table is empty?
6: Statement stmt = conn.createStatement();
7: ResultSet rs1 = stmt.executeQuery("select * from people");
8: ResultSet rs2 = stmt.executeQuery("select * from people");
9: System.out.println(rs1.next() + " " + rs2.next());
A. It prints false false.
B. It prints true false.
C. It does not terminate.
D. It throws a SQLException.

|
32. How many rows are added to the colors table from running the following?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement()) {
conn.setAutoCommit(false);
stmt.executeUpdate("insert into colors values ('red')");
stmt.executeUpdate("insert into colors values ('blue')");
conn.rollback();
conn.setAutoCommit(true);
stmt.executeUpdate("insert into colors values ('green')");
}
A. None
B. One
C. Two
D. Three
|
33. Assuming the clowns database exists and contains one empty table named clowns, what is
the output of the following when run using a JDBC 4_0 driver?
import java.sql.*;
public class EmptyTable {
public static void main (String[] args) throws SQLException { // s1
String url = "jdbc:derby:clowns";
try (Connection conn = DriverManager.getConnection(url); // s2
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from clowns")) {
if (rs.next())
System.out.println(rs.getString(1));
}
}
}
A. The code terminates successfully without any output.
B. The code does not compile due to line s1
C. The code does not compile due to line s2
D. None of the above
|
34. Given the following code snippet and the table below, what is the output of the following
when using a driver that supports a scroll sensitive ResultSet?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement(
ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);

ResultSet rs = stmt.executeQuery(
"select * from people order by last_name asc")) {
rs.afterLast();
rs.next();
rs.next();
rs.previous();
rs.previous();
System.out.println(rs.getString(1));
}
first_name
character varying(255)
last_name
character varying(255)
Jeanne
Janeice
Elena
Scott
Boyarsky
DelVecchio
Felder
Selikoff
A. Janeice
B. Elena
C. Scott
D. The code throws a SQLException at runtime.
|
35. Given the following code snippet and the table in question 34, what is the output of the
following
when using a driver that supports a scroll sensitive ResultSet?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement(
ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
ResultSet rs = stmt.executeQuery(
"select * from people order by last_name asc")) {
rs.absolute(-1);
System.out.print(rs.getString(1));
System.out.print(" ");
rs.absolute(1);
System.out.print(rs.getString(1));
}
A. Jeanne Scott
B. Scott Jeanne
C. The code compiles, but the output is neither of these.
D. The code throws a SQLException at runtime.

|
36. Given the following code snippet and the table in question 34, what is the output of the
following?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(
"select * from people order by last_name asc")) {
rs.next();
rs.next();
System.out.print(rs.getString(1));
System.out.print(" ");
rs.absolute(1);
System.out.print(rs.getString(1));
}
A. Jeanne Scott
B. Scott Jeanne
C. The code compiles, but the output is neither of these.
D. The code throws a SQLException at runtime.
|
37. Given that the people table has 10 rows, what is the result of the following when using a
driver that supports a scroll sensitive Resultset?
String sql = "select count(*) from people";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(sql,
ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
rs.next();
rs.absolute(0); // q1
System.out.print(rs.getInt(1)); // q2
}
A. 10
B. The code does not compile.
C. Line q1 throws a SQLException.
D. Line q2 throws a SQLException.
|
38. How many rows are added to the colors table from running the following?
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement()) {
conn.setAutoCommit(false);
stmt.executeUpdate("insert into colors values ('red')");
stmt.executeUpdate("insert into colors values ('blue')");

conn.rollback();
conn.setAutoCommit(true);
stmt.executeUpdate("insert into colors values ('green')");
conn.rollback();
}
A. None
B. One
C. Two
D. Three
|
39. Suppose the ResultSet is scrollable and contains 10 rows. How many times does the following
print true?
16: System.out.println(rs.absolute(-2));
17: System.out.println(rs.relative(-1));
18: System.out.println(rs.beforeFirst());
19: System.out.println(rs.relative(5));
A. Two
B. Three
C. Four
D. None of the above
|
40. What is the correct order to close database resources?
A. Connection then Statement then ResultSet
B. ResultSet then Statement then Connection
C. Statement then Connection then ResultSet
D. Statement then ResultSet then Connection


|
1. Which is not a locale?
A. Cultural region
B. Geographical region
C. Political region
D. Time zone region
|
2. When localizing an application, which type of data varies in presentation depending on
locale?
A. Currencies
B. Dates
C. Both
D. Neither
|
3. How do you find out the locale of the running program?
A. Locale.get("default")
B. Locale.get(Locale.DEFAULT)
C. Locale.getDefault()
D. None of the above
|
4. If your application has all town names in a single file named strings.properties, what is
the most specific process that has been implemented?
A. Internationalization
B. Localization
C. Specialization
D. Translation
|
5. Which interfaces does Properties implement?
I. Hashtable
II. HashMap
III. Map
A. III
B. I and II
C. I and III
D. II and III
|
6. Which filename extension can hold a String property value in a resource bundle?
A. .java
B. .properties
C. Both of the above
D. Neither of the above

|
7. How long will the effects of calling Locale.setDefault() be active assuming no other
calls to that method are made?
A. Until the end of the method
B. Until the program exits
C. Until the next reboot of the computer
D. None of the above. It persists even past a reboot.
|
8. Given this properties file used to load the Properties object props and this code snippet,
what is the output?
mystery=bag
type=paper
18: System.out.print(props.getProperty("mystery"));
19: System.out.print(" ");
20: System.out.print(props.getProperty("more"));
A. bag
B. bag null
C. bag ?
D. This code throws a runtime exception on line 20.
|
9. Fill in the blanks to complete the following code for a Java resource bundle.
public class Flights_en extends {
protected Object[][] () {
return new Object[0][0];
}
}
A. JavaResourceBundle, getContents
B. JavaResourceBundle, getProperties
C. ListResourceBundle, getContents
D. ListResourceBundle, getProperties
|
10. Which of the following shows a valid Locale format for the language Hindi and the
country
India?
A. hi_IN
B. HI_in
C. in_HI
D. IN_hi

|
11. If the key purple is in all four of these files, which file will the following code use for the
resource bundle?
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Colors");
rb.getString("purple");
A. Colors.class
B. Colors.properties
C. Colors_en_US.class
D. Colors_en_US.properties
|
12. What is the output of the following?
package counter;
import java.util.*;
public class CountResource extends ListResourceBundle {
private int count = 0;
@Override
protected Object[][] getContents() {
return new Object[][] { { "count", count++ } };
}
public static void main(String[] args) {
ResourceBundle rb = ResourceBundle.getBundle("counter.CountResource");
System.out.println(rb.getObject("count") + " " + rb.getObject("count"));
}
}
A. 0 0
B. 0 1
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
13. Which of the following shows a valid Locale format?
A. en
B. US
C. US_en
D. None of the above

|
14. Which filename extension can define a LocalDateTime property value in a resource
bundle?
A. .java
B. .properties
C. Both of the above
D. Neither of the above
|
15. What happens if you run this code with no resource bundles available?
ResourceBundle rb = ResourceBundle.getBundle("ghost.None");
A. It creates a resource bundle with no key/value pairs.
B. It runs without issue because the resource bundle is only searched for when getting the
first key.
C. It throws a MissingResourceException.
D. None of the above
|
16. What is the result of the following?
Map<String, String> map = new TreeMap<>();
map.put("tool", "hammer");
map.put("problem", "nail");
Properties props = new Properties(); // p1
map.forEach((k,v) -> props.put(k, v)); // p2
String t = props.get("tool"); // p3
String n = props.get("nail");
System.out.println(t + " " + n);
A. hammer nail
B. The code does not compile due to line p1
C. The code does not compile due to line p2
D. The code does not compile due to line p3
|
17. Which filename extension can hold a LocalDateTime property key in a resource bundle?
A. .java
B. .properties
C. Both of the above
D. Neither of the above

|
18. If the key purple is in all four of these files, which file will the following code use for the
resource bundle?
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Colors");
rb.getString("purple");
A. Colors_en.class
B. Colors_en.properties
C. Colors_US.class
D. Colors_US.properties
|
19. Fill in the blank so the code correctly compiles and creates a Locale.
Locale loc = Locale. ;
A. get("Italian")
B. get(Locale.ITALIAN)
C. getLocale("Italian")
D. None of the above
|
20. What is the result of the following?
Map<Object, Object> map = new TreeMap<>();
map.put("tool", "hammer");
map.put("problem", "nail");
Properties props = new Properties(); // p1
map.forEach((k,v) -> props.put(k, v)); // p2
String t = props.getProperty("tool"); // p3
String n = props.getProperty("problem");
System.out.println(t + " " + n);
A. hammer nail
B. The code does not compile due to line p1
C. The code does not compile due to line p2
D. The code does not compile due to line p3
|
21. What is the output of the following?
1: package keyboard;
2: import java.util.*;
3:
4: public class Type {
5: protected Object[][] getContents() {
6: return new Object[][] { { "keys", new ArrayList<String>() }};
7: }

8: public static void main(String[] args) {
9: ResourceBundle rb = ResourceBundle.getBundle("keyboard.Type");
10: List<String> keys = (List) rb.getObject("keys");
11: keys.add("q");
12: keys.add("w");
13: keys.add("e");
14: keys.add("r");
15: keys.add("t");
16: keys.add("y");
17: System.out.println(((List) rb.getObject("keys")).size());
18: }
19: }
A. 0
B. 6
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
22. How many lines does the following print out?
3: Locale.setDefault(Locale.KOREAN);
4: System.out.println(Locale.getDefault());
5: Locale.setDefault(new Locale("en", "AU"));
6: System.out.println(Locale.getDefault());
7: Locale.setDefault(new Locale("EN"));
8: System.out.println(Locale.getDefault());
A. None; it does not compile.
B. One followed by an exception
C. Two followed by an exception
D. All three
|
23. Given this properties file used to load the Properties object props and this code snippet,
what is the output?
mystery=bag
type=paper
18: System.out.print(props.getProperty("mystery", "?"));
19: System.out.print(" ");
20: System.out.print(props.getProperty("more", "?"));
A. bag
B. bag null
C. bag ?
D. This code throws a runtime exception on line 20

|
24. Given the following four properties files, what does this code print?
Cars_en.properties
engine=engine
horses=241
engine=moteur
country=US country=France
Cars_fr.properties
Cars_en_US.properties Cars_fr_FR.properties
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle(
"Cars", new Locale("fr", "FR"));
System.out.println(rb.getString("country") + " "
+ rb.getString("engine"));
A. France engine
B. France moteur
C. France null
D. The code throws an exception at runtime.
|
25. Given the four properties files in question 24, what does this code print?
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle(
"Cars", new Locale("fr", "CA"));
System.out.println(rb.getString("engine") + " "
+ rb.getString("horses"));
A. engine 241
B. moteur 241
C. moteur null
D. The code throws an exception at runtime.
|
26. Given the four properties files in question 24, what does this code print?
Locale.setDefault(new Locale("fr", "CA"));
ResourceBundle rb = ResourceBundle.getBundle(
"Cars", new Locale("en", "CA"));

System.out.println(rb.getString("engine") + " "
+ rb.getString("horses"));
A. engine 241
B. moteur 241
C. moteur null
D. The code throws an exception at runtime.
|
27. Which statement about ListResourceBundle is true?
A. A disadvantage over properties files is that you cannot create the value at runtime.
B. Names-fr.java is a bad implementation class name.
C. Values of type Integer are not allowed.
D. None of the above
|
28. If the key red is in all four of these files, which file will the following code use for the
resource bundle?
Locale loc = new Locale("zh", "CN");
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Colors", loc);
rb.getString("red");
A. Colors_CN.properties
B. Colors_en.properties
C. Colors_US.properties
D. Colors_zh.properties
|
29. What is the output of the following?
package counter;
import java.util.*;
public class PropertyCounter extends ListResourceBundle {
private int count = 0;
@Override
protected Object[][] getContents() {
return new Object[][] {{ "count", new PropertyCounter() }};
}
public int getCount() {
return count++;
}

public static void main(String[] args) {
ResourceBundle rb = ResourceBundle.getBundle("counter.PropertyCounter");
PropertyCounter obj = (PropertyCounter) rb.getObject("count");
System.out.println(obj.getCount() + " " + obj.getCount());
}
}
A. 0 0
B. 0 1
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
30. What is the output of the following?
1: package keyboard;
2: import java.util.*;
3:
4: public class Type extends ListResourceBundle {
5: protected Object[][] getContents() {
6: return new Object[][] { { "keys", new ArrayList<String>() }};
7: }
8: public static void main(String[] args) {
9: ResourceBundle rb = ResourceBundle.getBundle("Type");
10: List<String> keys = (List) rb.getObject("keys");
11: keys.add("q");
12: keys.add("w");
13: keys.add("e");
14: keys.add("r");
15: keys.add("t");
16: keys.add("y");
17: System.out.println(((List) rb.getObject("keys")).size());
18: }
19: }
A. 0
B. 6
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
31. Given the following snippets of resource bundles from when we compiled the application,
what is the result of the following?
Buggy.java
getContents:
return new Object[][]
{{ "wheels", "4" }};
getContents:
return
new Object[0][0];
Buggy_en.java
Buggy.properties
color=white
wheels=6
color=black
Buggy_en.properties
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Buggy");
System.out.println(rb.getString("wheels"));
A. null
B. 4
C. 6
D. The code throws an exception at runtime.
|
32. Given the snippets of resource bundles in question 31 from when we compiled the application,
what is the result of the following?
Locale.setDefault(new Locale("en"));
ResourceBundle rb = ResourceBundle.getBundle("Buggy");
System.out.println(rb.getString("color"));
A. null
B. black
C. white
D. The code throws an exception at runtime.
|
33. Given the snippets of resource bundles in question 31 from when we compiled the
application,
what is the result of the following?
Locale.setDefault(new Locale("zh"));
ResourceBundle rb = ResourceBundle.getBundle("Buggy");
System.out.println(rb.getString("wheels"));
A. null
B. 4
C. 6
D. The code throws an exception at runtime.

|
34. If the key red is in all three of these files, which file will the following code use for the
resource bundle?
Locale loc = new Locale("zh", "CN");
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Colors", loc);
rb.getString("red");
A. Colors_en.properties
B. Colors.properties
C. Red_en.properties
D. None of the above. It will throw a MissingResourceException.
|
35. Which can fill in the blank in this code?
Properties props = new Properties();
props. ("x");
A. get
B. getProperty
C. Both of the above
D. Neither of the above
|
36. What is the output of the following?
1: package keyboard;
2: import java.util.*;
3:
4: public class Type extends ListResourceBundle {
5: protected Object[][] getContents() {
6: return new Object[][] { { "keys", new ArrayList<String>() }};
7: }
8: public static void main(String[] args) {
9: ResourceBundle rb = ResourceBundle.getBundle("keyboard.Type");
10: List<String> keys = (List) rb.getObject("keys");
11: keys.add("q");
12: keys.add("w");
13: keys.add("e");
14: keys.add("r");
15: keys.add("t");
16: keys.add("y");
17: System.out.println(((List) rb.getObject("keys")).size());
18: }
19: }

A. 0
B. 6
C. The code does not compile.
D. The code compiles but throws an exception at runtime.
|
37. What is the result of the following?
Map<String, String> map = new TreeMap<>();
map.put("tool", "hammer");
map.put("problem", "nail");
Property props = new Property(); // p1
map.forEach((k,v) -> props.put(k, v)); // p2
String t = props.getProperty("tool"); // p3
String n = props.getProperty("nail");
System.out.println(t + " " + n);
A. hammer nail
B. The code does not compile due to line p1.
C. The code does not compile due to line p2.
D. The code does not compile due to line p3.
|
38. What is the output of the following?
package counter;
import java.util.*;
public class CountResource extends ListResourceBundle {
private int count = 0;
@Override
protected Object[][] getContents() {
return new Object[][] { { "count", count++ } };
}
public static void main(String[] args) {
ResourceBundle rb = new ResourceBundle("counter.CountResource");
System.out.println(rb.getObject("count") + " " + rb.getObject("count"));
}
}
A. 0 0
B. 0 1
C. The code does not compile.
D. The code compiles but throws an exception at runtime.

|
39. Given the following two properties files in the pod package, what does the following class
output?
pod.container.properties
name=generic
number=2
pod.container_en.properties
name=Docker
type=container
package pod;
import java.util.*;
public class WhatKind {
public static void main(String[] args) {
Locale.setDefault(new Locale("en"));
ResourceBundle rb = ResourceBundle.getBundle("pod.container");
String name = rb.getString("name");
String type = rb.getString("type");
System.out.println(name + " " + type); }
}
A. Docker container
B. generic container
C. generic null
D. None of the above
|
40. If the key red is in all three of these files, which file will the following code use for the
resource bundle?
Locale loc = new Locale("zh", "CN");
Locale.setDefault(new Locale("en", "US"));
ResourceBundle rb = ResourceBundle.getBundle("Colors", loc);
rb.getString("red");
A. Colors_EN.properties
B. Colors_ZH.properties
C. Red_EN.properties
D. None of the above. It will throw a MissingResourceException.
